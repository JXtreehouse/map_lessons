'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _math = require('math.gl');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SphericalCoordinates = _math.experimental.SphericalCoordinates;


var defaultState = {
  position: [0, 0, 0],
  lookAt: [0, 0, 0],
  up: [0, 0, 1],

  rotationX: 0,
  rotationY: 0,

  fov: 50,
  near: 1,
  far: 100
};

/* Helpers */

function ensureFinite(value, fallbackValue) {
  return Number.isFinite(value) ? value : fallbackValue;
}

var DEFAULT_POSITION = [0, 0, 0];

var ViewState = function () {
  function ViewState(opts) {
    _classCallCheck(this, ViewState);

    var width = opts.width,
        height = opts.height,
        _opts$position = opts.position,
        position = _opts$position === undefined ? DEFAULT_POSITION : _opts$position,
        bearing = opts.bearing,
        pitch = opts.pitch,
        longitude = opts.longitude,
        latitude = opts.latitude,
        zoom = opts.zoom;


    (0, _assert2.default)(Number.isFinite(width), '`width` must be supplied');
    (0, _assert2.default)(Number.isFinite(height), '`height` must be supplied');

    this._viewportProps = this._applyConstraints(Object.assign({}, opts, {
      width: width,
      height: height,
      position: new _math.Vector3(ensureFinite(position && position[0], defaultState.position[0]), ensureFinite(position && position[1], defaultState.position[1]), ensureFinite(position && position[2], defaultState.position[2])),
      bearing: ensureFinite(bearing, defaultState.bearing),
      pitch: ensureFinite(pitch, defaultState.pitch),
      longitude: longitude,
      latitude: latitude,
      zoom: zoom
    }));
  }

  _createClass(ViewState, [{
    key: 'getViewportProps',
    value: function getViewportProps() {
      return this._viewportProps;
    }
  }, {
    key: 'getDirection',
    value: function getDirection() {
      var spherical = new SphericalCoordinates({
        bearing: this._viewportProps.bearing,
        pitch: this._viewportProps.pitch
      });
      var direction = spherical.toVector3().normalize();
      return direction;
    }
  }, {
    key: 'getDirectionFromBearing',
    value: function getDirectionFromBearing(bearing) {
      var spherical = new SphericalCoordinates({
        bearing: bearing,
        pitch: 90
      });
      var direction = spherical.toVector3().normalize();
      return direction;
    }

    // Redefined by subclass
    // Apply any constraints (mathematical or defined by _viewportProps) to map state

  }, {
    key: '_applyConstraints',
    value: function _applyConstraints(props) {
      return props;
    }
  }]);

  return ViewState;
}();

exports.default = ViewState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2NvbnRyb2xsZXJzL3ZpZXctc3RhdGUuanMiXSwibmFtZXMiOlsiU3BoZXJpY2FsQ29vcmRpbmF0ZXMiLCJkZWZhdWx0U3RhdGUiLCJwb3NpdGlvbiIsImxvb2tBdCIsInVwIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwiZm92IiwibmVhciIsImZhciIsImVuc3VyZUZpbml0ZSIsInZhbHVlIiwiZmFsbGJhY2tWYWx1ZSIsIk51bWJlciIsImlzRmluaXRlIiwiREVGQVVMVF9QT1NJVElPTiIsIlZpZXdTdGF0ZSIsIm9wdHMiLCJ3aWR0aCIsImhlaWdodCIsImJlYXJpbmciLCJwaXRjaCIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwiem9vbSIsIl92aWV3cG9ydFByb3BzIiwiX2FwcGx5Q29uc3RyYWludHMiLCJPYmplY3QiLCJhc3NpZ24iLCJzcGhlcmljYWwiLCJkaXJlY3Rpb24iLCJ0b1ZlY3RvcjMiLCJub3JtYWxpemUiLCJwcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTs7Ozs7Ozs7SUFET0Esb0Isc0JBQUFBLG9COzs7QUFHUCxJQUFNQyxlQUFlO0FBQ25CQyxZQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBRFM7QUFFbkJDLFVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FGVztBQUduQkMsTUFBSSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUhlOztBQUtuQkMsYUFBVyxDQUxRO0FBTW5CQyxhQUFXLENBTlE7O0FBUW5CQyxPQUFLLEVBUmM7QUFTbkJDLFFBQU0sQ0FUYTtBQVVuQkMsT0FBSztBQVZjLENBQXJCOztBQWFBOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxhQUE3QixFQUE0QztBQUMxQyxTQUFPQyxPQUFPQyxRQUFQLENBQWdCSCxLQUFoQixJQUF5QkEsS0FBekIsR0FBaUNDLGFBQXhDO0FBQ0Q7O0FBRUQsSUFBTUcsbUJBQW1CLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQXpCOztJQUVxQkMsUztBQUNuQixxQkFBWUMsSUFBWixFQUFrQjtBQUFBOztBQUFBLFFBR2RDLEtBSGMsR0FnQlpELElBaEJZLENBR2RDLEtBSGM7QUFBQSxRQUlkQyxNQUpjLEdBZ0JaRixJQWhCWSxDQUlkRSxNQUpjO0FBQUEseUJBZ0JaRixJQWhCWSxDQU9kZixRQVBjO0FBQUEsUUFPZEEsUUFQYyxrQ0FPSGEsZ0JBUEc7QUFBQSxRQVNkSyxPQVRjLEdBZ0JaSCxJQWhCWSxDQVNkRyxPQVRjO0FBQUEsUUFVZEMsS0FWYyxHQWdCWkosSUFoQlksQ0FVZEksS0FWYztBQUFBLFFBYWRDLFNBYmMsR0FnQlpMLElBaEJZLENBYWRLLFNBYmM7QUFBQSxRQWNkQyxRQWRjLEdBZ0JaTixJQWhCWSxDQWNkTSxRQWRjO0FBQUEsUUFlZEMsSUFmYyxHQWdCWlAsSUFoQlksQ0FlZE8sSUFmYzs7O0FBa0JoQiwwQkFBT1gsT0FBT0MsUUFBUCxDQUFnQkksS0FBaEIsQ0FBUCxFQUErQiwwQkFBL0I7QUFDQSwwQkFBT0wsT0FBT0MsUUFBUCxDQUFnQkssTUFBaEIsQ0FBUCxFQUFnQywyQkFBaEM7O0FBRUEsU0FBS00sY0FBTCxHQUFzQixLQUFLQyxpQkFBTCxDQUNwQkMsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JYLElBQWxCLEVBQXdCO0FBQ3RCQyxrQkFEc0I7QUFFdEJDLG9CQUZzQjtBQUd0QmpCLGdCQUFVLGtCQUNSUSxhQUFhUixZQUFZQSxTQUFTLENBQVQsQ0FBekIsRUFBc0NELGFBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBdEMsQ0FEUSxFQUVSUSxhQUFhUixZQUFZQSxTQUFTLENBQVQsQ0FBekIsRUFBc0NELGFBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBdEMsQ0FGUSxFQUdSUSxhQUFhUixZQUFZQSxTQUFTLENBQVQsQ0FBekIsRUFBc0NELGFBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBdEMsQ0FIUSxDQUhZO0FBUXRCa0IsZUFBU1YsYUFBYVUsT0FBYixFQUFzQm5CLGFBQWFtQixPQUFuQyxDQVJhO0FBU3RCQyxhQUFPWCxhQUFhVyxLQUFiLEVBQW9CcEIsYUFBYW9CLEtBQWpDLENBVGU7QUFVdEJDLDBCQVZzQjtBQVd0QkMsd0JBWHNCO0FBWXRCQztBQVpzQixLQUF4QixDQURvQixDQUF0QjtBQWdCRDs7Ozt1Q0FFa0I7QUFDakIsYUFBTyxLQUFLQyxjQUFaO0FBQ0Q7OzttQ0FFYztBQUNiLFVBQU1JLFlBQVksSUFBSTdCLG9CQUFKLENBQXlCO0FBQ3pDb0IsaUJBQVMsS0FBS0ssY0FBTCxDQUFvQkwsT0FEWTtBQUV6Q0MsZUFBTyxLQUFLSSxjQUFMLENBQW9CSjtBQUZjLE9BQXpCLENBQWxCO0FBSUEsVUFBTVMsWUFBWUQsVUFBVUUsU0FBVixHQUFzQkMsU0FBdEIsRUFBbEI7QUFDQSxhQUFPRixTQUFQO0FBQ0Q7Ozs0Q0FFdUJWLE8sRUFBUztBQUMvQixVQUFNUyxZQUFZLElBQUk3QixvQkFBSixDQUF5QjtBQUN6Q29CLHdCQUR5QztBQUV6Q0MsZUFBTztBQUZrQyxPQUF6QixDQUFsQjtBQUlBLFVBQU1TLFlBQVlELFVBQVVFLFNBQVYsR0FBc0JDLFNBQXRCLEVBQWxCO0FBQ0EsYUFBT0YsU0FBUDtBQUNEOztBQUVEO0FBQ0E7Ozs7c0NBQ2tCRyxLLEVBQU87QUFDdkIsYUFBT0EsS0FBUDtBQUNEOzs7Ozs7a0JBbEVrQmpCLFMiLCJmaWxlIjoidmlldy1zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmVjdG9yMywgZXhwZXJpbWVudGFsfSBmcm9tICdtYXRoLmdsJztcbmNvbnN0IHtTcGhlcmljYWxDb29yZGluYXRlc30gPSBleHBlcmltZW50YWw7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcbiAgcG9zaXRpb246IFswLCAwLCAwXSxcbiAgbG9va0F0OiBbMCwgMCwgMF0sXG4gIHVwOiBbMCwgMCwgMV0sXG5cbiAgcm90YXRpb25YOiAwLFxuICByb3RhdGlvblk6IDAsXG5cbiAgZm92OiA1MCxcbiAgbmVhcjogMSxcbiAgZmFyOiAxMDBcbn07XG5cbi8qIEhlbHBlcnMgKi9cblxuZnVuY3Rpb24gZW5zdXJlRmluaXRlKHZhbHVlLCBmYWxsYmFja1ZhbHVlKSB7XG4gIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBmYWxsYmFja1ZhbHVlO1xufVxuXG5jb25zdCBERUZBVUxUX1BPU0lUSU9OID0gWzAsIDAsIDBdO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3U3RhdGUge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgY29uc3Qge1xuICAgICAgLyogVmlld3BvcnQgYXJndW1lbnRzICovXG4gICAgICB3aWR0aCwgLy8gV2lkdGggb2Ygdmlld3BvcnRcbiAgICAgIGhlaWdodCwgLy8gSGVpZ2h0IG9mIHZpZXdwb3J0XG5cbiAgICAgIC8vIFBvc2l0aW9uIGFuZCBvcmllbnRhdGlvblxuICAgICAgcG9zaXRpb24gPSBERUZBVUxUX1BPU0lUSU9OLCAvLyB0eXBpY2FsbHkgaW4gbWV0ZXJzIGZyb20gYW5jaG9yIHBvaW50XG5cbiAgICAgIGJlYXJpbmcsIC8vIFJvdGF0aW9uIGFyb3VuZCB5IGF4aXNcbiAgICAgIHBpdGNoLCAvLyBSb3RhdGlvbiBhcm91bmQgeCBheGlzXG5cbiAgICAgIC8vIEdlb3NwYXRpYWwgYW5jaG9yXG4gICAgICBsb25naXR1ZGUsXG4gICAgICBsYXRpdHVkZSxcbiAgICAgIHpvb21cbiAgICB9ID0gb3B0cztcblxuICAgIGFzc2VydChOdW1iZXIuaXNGaW5pdGUod2lkdGgpLCAnYHdpZHRoYCBtdXN0IGJlIHN1cHBsaWVkJyk7XG4gICAgYXNzZXJ0KE51bWJlci5pc0Zpbml0ZShoZWlnaHQpLCAnYGhlaWdodGAgbXVzdCBiZSBzdXBwbGllZCcpO1xuXG4gICAgdGhpcy5fdmlld3BvcnRQcm9wcyA9IHRoaXMuX2FwcGx5Q29uc3RyYWludHMoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBvcHRzLCB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMyhcbiAgICAgICAgICBlbnN1cmVGaW5pdGUocG9zaXRpb24gJiYgcG9zaXRpb25bMF0sIGRlZmF1bHRTdGF0ZS5wb3NpdGlvblswXSksXG4gICAgICAgICAgZW5zdXJlRmluaXRlKHBvc2l0aW9uICYmIHBvc2l0aW9uWzFdLCBkZWZhdWx0U3RhdGUucG9zaXRpb25bMV0pLFxuICAgICAgICAgIGVuc3VyZUZpbml0ZShwb3NpdGlvbiAmJiBwb3NpdGlvblsyXSwgZGVmYXVsdFN0YXRlLnBvc2l0aW9uWzJdKVxuICAgICAgICApLFxuICAgICAgICBiZWFyaW5nOiBlbnN1cmVGaW5pdGUoYmVhcmluZywgZGVmYXVsdFN0YXRlLmJlYXJpbmcpLFxuICAgICAgICBwaXRjaDogZW5zdXJlRmluaXRlKHBpdGNoLCBkZWZhdWx0U3RhdGUucGl0Y2gpLFxuICAgICAgICBsb25naXR1ZGUsXG4gICAgICAgIGxhdGl0dWRlLFxuICAgICAgICB6b29tXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZXRWaWV3cG9ydFByb3BzKCkge1xuICAgIHJldHVybiB0aGlzLl92aWV3cG9ydFByb3BzO1xuICB9XG5cbiAgZ2V0RGlyZWN0aW9uKCkge1xuICAgIGNvbnN0IHNwaGVyaWNhbCA9IG5ldyBTcGhlcmljYWxDb29yZGluYXRlcyh7XG4gICAgICBiZWFyaW5nOiB0aGlzLl92aWV3cG9ydFByb3BzLmJlYXJpbmcsXG4gICAgICBwaXRjaDogdGhpcy5fdmlld3BvcnRQcm9wcy5waXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHNwaGVyaWNhbC50b1ZlY3RvcjMoKS5ub3JtYWxpemUoKTtcbiAgICByZXR1cm4gZGlyZWN0aW9uO1xuICB9XG5cbiAgZ2V0RGlyZWN0aW9uRnJvbUJlYXJpbmcoYmVhcmluZykge1xuICAgIGNvbnN0IHNwaGVyaWNhbCA9IG5ldyBTcGhlcmljYWxDb29yZGluYXRlcyh7XG4gICAgICBiZWFyaW5nLFxuICAgICAgcGl0Y2g6IDkwXG4gICAgfSk7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gc3BoZXJpY2FsLnRvVmVjdG9yMygpLm5vcm1hbGl6ZSgpO1xuICAgIHJldHVybiBkaXJlY3Rpb247XG4gIH1cblxuICAvLyBSZWRlZmluZWQgYnkgc3ViY2xhc3NcbiAgLy8gQXBwbHkgYW55IGNvbnN0cmFpbnRzIChtYXRoZW1hdGljYWwgb3IgZGVmaW5lZCBieSBfdmlld3BvcnRQcm9wcykgdG8gbWFwIHN0YXRlXG4gIF9hcHBseUNvbnN0cmFpbnRzKHByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG59XG4iXX0=