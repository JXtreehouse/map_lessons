'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.experimental = exports.DeckGL = exports.default = exports.GeoJsonLayer = exports.PolygonLayer = exports.PathLayer = exports.HexagonCellLayer = exports.HexagonLayer = exports.GridCellLayer = exports.GridLayer = exports.ScreenGridLayer = exports.ScatterplotLayer = exports.PointCloudLayer = exports.LineLayer = exports.IconLayer = exports.ArcLayer = exports.OrthographicViewport = exports.PerspectiveViewport = exports.WebMercatorViewport = exports.Viewport = exports.CompositeLayer = exports.Layer = exports.AttributeManager = exports.LayerManager = exports.COORDINATE_SYSTEM = undefined;

var _core = require('./core');

Object.defineProperty(exports, 'COORDINATE_SYSTEM', {
  enumerable: true,
  get: function get() {
    return _core.COORDINATE_SYSTEM;
  }
});
Object.defineProperty(exports, 'LayerManager', {
  enumerable: true,
  get: function get() {
    return _core.LayerManager;
  }
});
Object.defineProperty(exports, 'AttributeManager', {
  enumerable: true,
  get: function get() {
    return _core.AttributeManager;
  }
});
Object.defineProperty(exports, 'Layer', {
  enumerable: true,
  get: function get() {
    return _core.Layer;
  }
});
Object.defineProperty(exports, 'CompositeLayer', {
  enumerable: true,
  get: function get() {
    return _core.CompositeLayer;
  }
});
Object.defineProperty(exports, 'Viewport', {
  enumerable: true,
  get: function get() {
    return _core.Viewport;
  }
});
Object.defineProperty(exports, 'WebMercatorViewport', {
  enumerable: true,
  get: function get() {
    return _core.WebMercatorViewport;
  }
});
Object.defineProperty(exports, 'PerspectiveViewport', {
  enumerable: true,
  get: function get() {
    return _core.PerspectiveViewport;
  }
});
Object.defineProperty(exports, 'OrthographicViewport', {
  enumerable: true,
  get: function get() {
    return _core.OrthographicViewport;
  }
});

var _coreLayers = require('./core-layers');

Object.defineProperty(exports, 'ArcLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.ArcLayer;
  }
});
Object.defineProperty(exports, 'IconLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.IconLayer;
  }
});
Object.defineProperty(exports, 'LineLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.LineLayer;
  }
});
Object.defineProperty(exports, 'PointCloudLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.PointCloudLayer;
  }
});
Object.defineProperty(exports, 'ScatterplotLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.ScatterplotLayer;
  }
});
Object.defineProperty(exports, 'ScreenGridLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.ScreenGridLayer;
  }
});
Object.defineProperty(exports, 'GridLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.GridLayer;
  }
});
Object.defineProperty(exports, 'GridCellLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.GridCellLayer;
  }
});
Object.defineProperty(exports, 'HexagonLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.HexagonLayer;
  }
});
Object.defineProperty(exports, 'HexagonCellLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.HexagonCellLayer;
  }
});
Object.defineProperty(exports, 'PathLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.PathLayer;
  }
});
Object.defineProperty(exports, 'PolygonLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.PolygonLayer;
  }
});
Object.defineProperty(exports, 'GeoJsonLayer', {
  enumerable: true,
  get: function get() {
    return _coreLayers.GeoJsonLayer;
  }
});

var _react = require('./react');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_react).default;
  }
});
Object.defineProperty(exports, 'DeckGL', {
  enumerable: true,
  get: function get() {
    return _react.DeckGL;
  }
});

var _reflectionEffect = require('./effects/experimental/reflection-effect/reflection-effect');

var _reflectionEffect2 = _interopRequireDefault(_reflectionEffect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

var experimental = {};

//
// CORE LIBRARY
//

// EXPERIMENTAL CORE LIB CLASSES (May change in minor version bumps, use at your own risk)
var ViewState = _core.experimental.ViewState,
    FirstPersonState = _core.experimental.FirstPersonState,
    OrbitState = _core.experimental.OrbitState,
    MapState = _core.experimental.MapState,
    Controller = _core.experimental.Controller,
    FirstPersonController = _core.experimental.FirstPersonController,
    FirstPersonViewport = _core.experimental.FirstPersonViewport,
    OrbitViewport = _core.experimental.OrbitViewport,
    ThirdPersonViewport = _core.experimental.ThirdPersonViewport,
    TRANSITION_EVENTS = _core.experimental.TRANSITION_EVENTS,
    LinearInterpolator = _core.experimental.LinearInterpolator,
    ViewportFlyToInterpolator = _core.experimental.ViewportFlyToInterpolator,
    DeckGLJS = _core.experimental.DeckGLJS,
    MapControllerJS = _core.experimental.MapControllerJS,
    EffectManager = _core.experimental.EffectManager,
    Effect = _core.experimental.Effect;


Object.assign(experimental, {
  // Unfinished controller/viewport classes
  ViewState: ViewState,
  FirstPersonState: FirstPersonState,
  OrbitState: OrbitState,
  MapState: MapState,

  Controller: Controller,
  FirstPersonController: FirstPersonController,

  FirstPersonViewport: FirstPersonViewport,
  OrbitViewport: OrbitViewport,
  ThirdPersonViewport: ThirdPersonViewport,

  // Transition bindings
  TRANSITION_EVENTS: TRANSITION_EVENTS,
  LinearInterpolator: LinearInterpolator,
  ViewportFlyToInterpolator: ViewportFlyToInterpolator,

  // Pure JS (non-React) API
  DeckGLJS: DeckGLJS,
  MapControllerJS: MapControllerJS,

  // Effects base classes
  EffectManager: EffectManager,
  Effect: Effect
});

// Experimental Data Accessor Helpers
// INTERNAL - TODO remove from experimental exports
var TransitionManager = _core.experimental.TransitionManager,
    extractViewportFrom = _core.experimental.extractViewportFrom,
    BinSorter = _core.experimental.BinSorter,
    linearScale = _core.experimental.linearScale,
    getLinearScale = _core.experimental.getLinearScale,
    quantizeScale = _core.experimental.quantizeScale,
    getQuantizeScale = _core.experimental.getQuantizeScale,
    clamp = _core.experimental.clamp,
    defaultColorRange = _core.experimental.defaultColorRange,
    log = _core.experimental.log,
    get = _core.experimental.get,
    count = _core.experimental.count,
    flatten = _core.experimental.flatten,
    countVertices = _core.experimental.countVertices,
    flattenVertices = _core.experimental.flattenVertices,
    fillArray = _core.experimental.fillArray,
    enable64bitSupport = _core.experimental.enable64bitSupport,
    fp64ify = _core.experimental.fp64ify;


Object.assign(experimental, {
  // For react module
  TransitionManager: TransitionManager,
  extractViewportFrom: extractViewportFrom,

  // For layers
  BinSorter: BinSorter,
  linearScale: linearScale,
  getLinearScale: getLinearScale,
  quantizeScale: quantizeScale,
  getQuantizeScale: getQuantizeScale,
  clamp: clamp,
  defaultColorRange: defaultColorRange,

  log: log,

  get: get,
  count: count,

  flatten: flatten,
  countVertices: countVertices,
  flattenVertices: flattenVertices,
  fillArray: fillArray,

  enable64bitSupport: enable64bitSupport,
  fp64ify: fp64ify
});

//
// CORE LAYERS PACKAGE
//

//
// EFFECTS PACKAGE
//

Object.assign(experimental, {
  ReflectionEffect: _reflectionEffect2.default
});

//
// REACT BINDINGS PACKAGE
//

// TODO - do we need to expose these?


Object.assign(experimental, {
  MapController: _react.MapController,
  OrbitController: _react.OrbitController,
  ViewportController: _react.ViewportController
});

//
// EXPERIMENTAL EXPORTS
//

exports.experimental = experimental;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,