// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* eslint-disable max-len */

var experimental = {};

//
// CORE LIBRARY
//

export {
// LIB
COORDINATE_SYSTEM, LayerManager, AttributeManager, Layer, CompositeLayer,
// Viewports
Viewport, WebMercatorViewport, PerspectiveViewport, OrthographicViewport } from './core';

// EXPERIMENTAL CORE LIB CLASSES (May change in minor version bumps, use at your own risk)
import { experimental as CoreExperimental } from './core';

var ViewState = CoreExperimental.ViewState,
    FirstPersonState = CoreExperimental.FirstPersonState,
    OrbitState = CoreExperimental.OrbitState,
    MapState = CoreExperimental.MapState,
    Controller = CoreExperimental.Controller,
    FirstPersonController = CoreExperimental.FirstPersonController,
    FirstPersonViewport = CoreExperimental.FirstPersonViewport,
    OrbitViewport = CoreExperimental.OrbitViewport,
    ThirdPersonViewport = CoreExperimental.ThirdPersonViewport,
    TRANSITION_EVENTS = CoreExperimental.TRANSITION_EVENTS,
    LinearInterpolator = CoreExperimental.LinearInterpolator,
    ViewportFlyToInterpolator = CoreExperimental.ViewportFlyToInterpolator,
    DeckGLJS = CoreExperimental.DeckGLJS,
    MapControllerJS = CoreExperimental.MapControllerJS,
    EffectManager = CoreExperimental.EffectManager,
    Effect = CoreExperimental.Effect;


Object.assign(experimental, {
  // Unfinished controller/viewport classes
  ViewState: ViewState,
  FirstPersonState: FirstPersonState,
  OrbitState: OrbitState,
  MapState: MapState,

  Controller: Controller,
  FirstPersonController: FirstPersonController,

  FirstPersonViewport: FirstPersonViewport,
  OrbitViewport: OrbitViewport,
  ThirdPersonViewport: ThirdPersonViewport,

  // Transition bindings
  TRANSITION_EVENTS: TRANSITION_EVENTS,
  LinearInterpolator: LinearInterpolator,
  ViewportFlyToInterpolator: ViewportFlyToInterpolator,

  // Pure JS (non-React) API
  DeckGLJS: DeckGLJS,
  MapControllerJS: MapControllerJS,

  // Effects base classes
  EffectManager: EffectManager,
  Effect: Effect
});

// Experimental Data Accessor Helpers
// INTERNAL - TODO remove from experimental exports
var TransitionManager = CoreExperimental.TransitionManager,
    extractViewportFrom = CoreExperimental.extractViewportFrom,
    BinSorter = CoreExperimental.BinSorter,
    linearScale = CoreExperimental.linearScale,
    getLinearScale = CoreExperimental.getLinearScale,
    quantizeScale = CoreExperimental.quantizeScale,
    getQuantizeScale = CoreExperimental.getQuantizeScale,
    clamp = CoreExperimental.clamp,
    defaultColorRange = CoreExperimental.defaultColorRange,
    log = CoreExperimental.log,
    get = CoreExperimental.get,
    count = CoreExperimental.count,
    flatten = CoreExperimental.flatten,
    countVertices = CoreExperimental.countVertices,
    flattenVertices = CoreExperimental.flattenVertices,
    fillArray = CoreExperimental.fillArray,
    enable64bitSupport = CoreExperimental.enable64bitSupport,
    fp64ify = CoreExperimental.fp64ify;


Object.assign(experimental, {
  // For react module
  TransitionManager: TransitionManager,
  extractViewportFrom: extractViewportFrom,

  // For layers
  BinSorter: BinSorter,
  linearScale: linearScale,
  getLinearScale: getLinearScale,
  quantizeScale: quantizeScale,
  getQuantizeScale: getQuantizeScale,
  clamp: clamp,
  defaultColorRange: defaultColorRange,

  log: log,

  get: get,
  count: count,

  flatten: flatten,
  countVertices: countVertices,
  flattenVertices: flattenVertices,
  fillArray: fillArray,

  enable64bitSupport: enable64bitSupport,
  fp64ify: fp64ify
});

//
// CORE LAYERS PACKAGE
//

export { ArcLayer, IconLayer, LineLayer, PointCloudLayer, ScatterplotLayer, ScreenGridLayer, GridLayer, GridCellLayer, HexagonLayer, HexagonCellLayer, PathLayer, PolygonLayer, GeoJsonLayer } from './core-layers';

//
// EFFECTS PACKAGE
//

import { default as ReflectionEffect } from './effects/experimental/reflection-effect/reflection-effect';

Object.assign(experimental, {
  ReflectionEffect: ReflectionEffect
});

//
// REACT BINDINGS PACKAGE
//

export { default, DeckGL } from './react';

// TODO - do we need to expose these?
import { MapController, OrbitController, ViewportController // TODO - merge with deck.gl?
} from './react';

Object.assign(experimental, {
  MapController: MapController,
  OrbitController: OrbitController,
  ViewportController: ViewportController
});

//
// EXPERIMENTAL EXPORTS
//

export { experimental };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,