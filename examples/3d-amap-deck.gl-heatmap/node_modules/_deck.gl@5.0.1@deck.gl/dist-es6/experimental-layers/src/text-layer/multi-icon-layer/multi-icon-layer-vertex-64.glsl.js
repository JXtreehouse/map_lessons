// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

export default "#define SHADER_NAME multi-icon-layer-vertex-shader-64\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\n\n// the following three attributes are for the multi-icon layer\nattribute float instanceIndexOfIcon;\nattribute float instanceNumOfIcon;\nattribute vec2 instancePixelOffset;\n\nuniform vec2 viewportSize;\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvec2 getShift(float instanceIndexOfIcon, float instanceNumOfIcon) {\n  // calculate the middle index of the string\n  float midIndex = (instanceNumOfIcon - 1.0) / 2.0;\n  // calculate horizontal shift of each letter\n  return vec2(instanceIndexOfIcon - midIndex, 0.0);\n}\n\nvoid main(void) {\n  vec2 iconSize = instanceIconFrames.zw;\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : instanceSizes / iconSize.y;\n\n  // scale and rotate vertex in \"pixel\" value and convert back to fraction in clipspace\n  vec2 shift = getShift(instanceIndexOfIcon, instanceNumOfIcon);\n  vec2 pixelOffset = (positions / 2.0 + shift) * iconSize + instanceOffsets;\n\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * sizeScale * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  vec4 instancePositions64xy = vec4(\n  instancePositions.x, instancePositions64xyLow.x,\n  instancePositions.y, instancePositions64xyLow.y);\n\n  vec2 projected_coord_xy[2];\n  project_position_fp64(instancePositions64xy, projected_coord_xy);\n\n  vec2 vertex_pos_modelspace[4];\n  vertex_pos_modelspace[0] = projected_coord_xy[0];\n  vertex_pos_modelspace[1] = projected_coord_xy[1];\n  vertex_pos_modelspace[2] = vec2(project_scale(instancePositions.z), 0.0);\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\n\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\n  gl_Position += project_pixel_to_clipspace(pixelOffset);\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vTextureCoords.y = 1.0 - vTextureCoords.y;\n\n  vColor = instanceColors / 255.;\n  picking_setPickingColor(instancePickingColors);\n\n  vColorMode = instanceColorModes;\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9leHBlcmltZW50YWwtbGF5ZXJzL3NyYy90ZXh0LWxheWVyL211bHRpLWljb24tbGF5ZXIvbXVsdGktaWNvbi1sYXllci12ZXJ0ZXgtNjQuZ2xzbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiJtdWx0aS1pY29uLWxheWVyLXZlcnRleC02NC5nbHNsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmV4cG9ydCBkZWZhdWx0IGBcXFxuI2RlZmluZSBTSEFERVJfTkFNRSBtdWx0aS1pY29uLWxheWVyLXZlcnRleC1zaGFkZXItNjRcblxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb25zO1xuXG5hdHRyaWJ1dGUgdmVjMyBpbnN0YW5jZVBvc2l0aW9ucztcbmF0dHJpYnV0ZSB2ZWMyIGluc3RhbmNlUG9zaXRpb25zNjR4eUxvdztcbmF0dHJpYnV0ZSBmbG9hdCBpbnN0YW5jZVNpemVzO1xuYXR0cmlidXRlIGZsb2F0IGluc3RhbmNlQW5nbGVzO1xuYXR0cmlidXRlIHZlYzQgaW5zdGFuY2VDb2xvcnM7XG5hdHRyaWJ1dGUgdmVjMyBpbnN0YW5jZVBpY2tpbmdDb2xvcnM7XG5hdHRyaWJ1dGUgdmVjNCBpbnN0YW5jZUljb25GcmFtZXM7XG5hdHRyaWJ1dGUgZmxvYXQgaW5zdGFuY2VDb2xvck1vZGVzO1xuYXR0cmlidXRlIHZlYzIgaW5zdGFuY2VPZmZzZXRzO1xuXG4vLyB0aGUgZm9sbG93aW5nIHRocmVlIGF0dHJpYnV0ZXMgYXJlIGZvciB0aGUgbXVsdGktaWNvbiBsYXllclxuYXR0cmlidXRlIGZsb2F0IGluc3RhbmNlSW5kZXhPZkljb247XG5hdHRyaWJ1dGUgZmxvYXQgaW5zdGFuY2VOdW1PZkljb247XG5hdHRyaWJ1dGUgdmVjMiBpbnN0YW5jZVBpeGVsT2Zmc2V0O1xuXG51bmlmb3JtIHZlYzIgdmlld3BvcnRTaXplO1xudW5pZm9ybSBmbG9hdCBzaXplU2NhbGU7XG51bmlmb3JtIHZlYzIgaWNvbnNUZXh0dXJlRGltO1xuXG52YXJ5aW5nIGZsb2F0IHZDb2xvck1vZGU7XG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmRzO1xuXG52ZWMyIHJvdGF0ZV9ieV9hbmdsZSh2ZWMyIHZlcnRleCwgZmxvYXQgYW5nbGUpIHtcbiAgZmxvYXQgYW5nbGVfcmFkaWFuID0gYW5nbGUgKiBQSSAvIDE4MC4wO1xuICBmbG9hdCBjb3NfYW5nbGUgPSBjb3MoYW5nbGVfcmFkaWFuKTtcbiAgZmxvYXQgc2luX2FuZ2xlID0gc2luKGFuZ2xlX3JhZGlhbik7XG4gIG1hdDIgcm90YXRpb25NYXRyaXggPSBtYXQyKGNvc19hbmdsZSwgLXNpbl9hbmdsZSwgc2luX2FuZ2xlLCBjb3NfYW5nbGUpO1xuICByZXR1cm4gcm90YXRpb25NYXRyaXggKiB2ZXJ0ZXg7XG59XG5cbnZlYzIgZ2V0U2hpZnQoZmxvYXQgaW5zdGFuY2VJbmRleE9mSWNvbiwgZmxvYXQgaW5zdGFuY2VOdW1PZkljb24pIHtcbiAgLy8gY2FsY3VsYXRlIHRoZSBtaWRkbGUgaW5kZXggb2YgdGhlIHN0cmluZ1xuICBmbG9hdCBtaWRJbmRleCA9IChpbnN0YW5jZU51bU9mSWNvbiAtIDEuMCkgLyAyLjA7XG4gIC8vIGNhbGN1bGF0ZSBob3Jpem9udGFsIHNoaWZ0IG9mIGVhY2ggbGV0dGVyXG4gIHJldHVybiB2ZWMyKGluc3RhbmNlSW5kZXhPZkljb24gLSBtaWRJbmRleCwgMC4wKTtcbn1cblxudm9pZCBtYWluKHZvaWQpIHtcbiAgdmVjMiBpY29uU2l6ZSA9IGluc3RhbmNlSWNvbkZyYW1lcy56dztcbiAgLy8gc2NhbGUgaWNvbiBoZWlnaHQgdG8gbWF0Y2ggaW5zdGFuY2VTaXplXG4gIGZsb2F0IGluc3RhbmNlU2NhbGUgPSBpY29uU2l6ZS55ID09IDAuMCA/IDAuMCA6IGluc3RhbmNlU2l6ZXMgLyBpY29uU2l6ZS55O1xuXG4gIC8vIHNjYWxlIGFuZCByb3RhdGUgdmVydGV4IGluIFwicGl4ZWxcIiB2YWx1ZSBhbmQgY29udmVydCBiYWNrIHRvIGZyYWN0aW9uIGluIGNsaXBzcGFjZVxuICB2ZWMyIHNoaWZ0ID0gZ2V0U2hpZnQoaW5zdGFuY2VJbmRleE9mSWNvbiwgaW5zdGFuY2VOdW1PZkljb24pO1xuICB2ZWMyIHBpeGVsT2Zmc2V0ID0gKHBvc2l0aW9ucyAvIDIuMCArIHNoaWZ0KSAqIGljb25TaXplICsgaW5zdGFuY2VPZmZzZXRzO1xuXG4gIHBpeGVsT2Zmc2V0ID0gcm90YXRlX2J5X2FuZ2xlKHBpeGVsT2Zmc2V0LCBpbnN0YW5jZUFuZ2xlcykgKiBzaXplU2NhbGUgKiBpbnN0YW5jZVNjYWxlO1xuICBwaXhlbE9mZnNldCArPSBpbnN0YW5jZVBpeGVsT2Zmc2V0O1xuICBwaXhlbE9mZnNldC55ICo9IC0xLjA7XG5cbiAgdmVjNCBpbnN0YW5jZVBvc2l0aW9uczY0eHkgPSB2ZWM0KFxuICBpbnN0YW5jZVBvc2l0aW9ucy54LCBpbnN0YW5jZVBvc2l0aW9uczY0eHlMb3cueCxcbiAgaW5zdGFuY2VQb3NpdGlvbnMueSwgaW5zdGFuY2VQb3NpdGlvbnM2NHh5TG93LnkpO1xuXG4gIHZlYzIgcHJvamVjdGVkX2Nvb3JkX3h5WzJdO1xuICBwcm9qZWN0X3Bvc2l0aW9uX2ZwNjQoaW5zdGFuY2VQb3NpdGlvbnM2NHh5LCBwcm9qZWN0ZWRfY29vcmRfeHkpO1xuXG4gIHZlYzIgdmVydGV4X3Bvc19tb2RlbHNwYWNlWzRdO1xuICB2ZXJ0ZXhfcG9zX21vZGVsc3BhY2VbMF0gPSBwcm9qZWN0ZWRfY29vcmRfeHlbMF07XG4gIHZlcnRleF9wb3NfbW9kZWxzcGFjZVsxXSA9IHByb2plY3RlZF9jb29yZF94eVsxXTtcbiAgdmVydGV4X3Bvc19tb2RlbHNwYWNlWzJdID0gdmVjMihwcm9qZWN0X3NjYWxlKGluc3RhbmNlUG9zaXRpb25zLnopLCAwLjApO1xuICB2ZXJ0ZXhfcG9zX21vZGVsc3BhY2VbM10gPSB2ZWMyKDEuMCwgMC4wKTtcblxuICBnbF9Qb3NpdGlvbiA9IHByb2plY3RfdG9fY2xpcHNwYWNlX2ZwNjQodmVydGV4X3Bvc19tb2RlbHNwYWNlKTtcbiAgZ2xfUG9zaXRpb24gKz0gcHJvamVjdF9waXhlbF90b19jbGlwc3BhY2UocGl4ZWxPZmZzZXQpO1xuXG4gIHZUZXh0dXJlQ29vcmRzID0gbWl4KFxuICAgIGluc3RhbmNlSWNvbkZyYW1lcy54eSxcbiAgICBpbnN0YW5jZUljb25GcmFtZXMueHkgKyBpY29uU2l6ZSxcbiAgICAocG9zaXRpb25zLnh5ICsgMS4wKSAvIDIuMFxuICApIC8gaWNvbnNUZXh0dXJlRGltO1xuXG4gIHZUZXh0dXJlQ29vcmRzLnkgPSAxLjAgLSB2VGV4dHVyZUNvb3Jkcy55O1xuXG4gIHZDb2xvciA9IGluc3RhbmNlQ29sb3JzIC8gMjU1LjtcbiAgcGlja2luZ19zZXRQaWNraW5nQ29sb3IoaW5zdGFuY2VQaWNraW5nQ29sb3JzKTtcblxuICB2Q29sb3JNb2RlID0gaW5zdGFuY2VDb2xvck1vZGVzO1xufVxuYDtcbiJdfQ==