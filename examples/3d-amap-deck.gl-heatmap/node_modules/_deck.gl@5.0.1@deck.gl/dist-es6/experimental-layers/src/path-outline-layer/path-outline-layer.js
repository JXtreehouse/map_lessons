var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { PathLayer } from 'deck.gl';
import { GL, Framebuffer, Texture2D, registerShaderModules } from 'luma.gl';
import outline from '../shaderlib/outline/outline';

registerShaderModules([outline]);

// TODO - this should be built into assembleShaders
function injectShaderCode(_ref) {
  var source = _ref.source,
      _ref$declarations = _ref.declarations,
      declarations = _ref$declarations === undefined ? '' : _ref$declarations,
      _ref$code = _ref.code,
      code = _ref$code === undefined ? '' : _ref$code;

  var INJECT_DECLARATIONS = /^/;
  var INJECT_CODE = /}[^{}]*$/;

  return source.replace(INJECT_DECLARATIONS, declarations).replace(INJECT_CODE, code.concat('\n}\n'));
}

var VS_DECLARATIONS = '#ifdef MODULE_OUTLINE\n  attribute float instanceZLevel;\n#endif\n';

var VS_CODE = '#ifdef MODULE_OUTLINE\n  outline_setUV(gl_Position);\n  outline_setZLevel(instanceZLevel);\n#endif\n';

var FS_CODE = '#ifdef MODULE_OUTLINE\n  gl_FragColor = outline_filterColor(gl_FragColor);\n#endif\n';

var defaultProps = {
  getZLevel: function getZLevel(object) {
    return object.zLevel | 0;
  }
};

var PathOutlineLayer = function (_PathLayer) {
  _inherits(PathOutlineLayer, _PathLayer);

  function PathOutlineLayer() {
    _classCallCheck(this, PathOutlineLayer);

    return _possibleConstructorReturn(this, (PathOutlineLayer.__proto__ || Object.getPrototypeOf(PathOutlineLayer)).apply(this, arguments));
  }

  _createClass(PathOutlineLayer, [{
    key: 'getShaders',

    // Override getShaders to inject the outline module
    value: function getShaders() {
      var shaders = _get(PathOutlineLayer.prototype.__proto__ || Object.getPrototypeOf(PathOutlineLayer.prototype), 'getShaders', this).call(this);
      return Object.assign({}, shaders, {
        modules: shaders.modules.concat(['outline']),
        vs: injectShaderCode({ source: shaders.vs, declarations: VS_DECLARATIONS, code: VS_CODE }),
        fs: injectShaderCode({ source: shaders.fs, code: FS_CODE })
      });
    }
  }, {
    key: 'initializeState',
    value: function initializeState(context) {
      _get(PathOutlineLayer.prototype.__proto__ || Object.getPrototypeOf(PathOutlineLayer.prototype), 'initializeState', this).call(this, context);

      // Create an outline "shadow" map
      // TODO - we should create a single outlineMap for all layers
      this.setState({
        outlineFramebuffer: new Framebuffer(context.gl),
        dummyTexture: new Texture2D(context.gl)
      });

      // Create an attribute manager
      this.state.attributeManager.addInstanced({
        instanceZLevel: {
          size: 1,
          type: GL.UNSIGNED_BYTE,
          update: this.calculateZLevels,
          accessor: 'getZLevel'
        }
      });
    }

    // Override draw to add render module

  }, {
    key: 'draw',
    value: function draw(_ref2) {
      var _ref2$moduleParameter = _ref2.moduleParameters,
          moduleParameters = _ref2$moduleParameter === undefined ? {} : _ref2$moduleParameter,
          parameters = _ref2.parameters,
          uniforms = _ref2.uniforms,
          context = _ref2.context;

      // Need to calculate same uniforms as base layer
      var _props = this.props,
          rounded = _props.rounded,
          miterLimit = _props.miterLimit,
          widthScale = _props.widthScale,
          widthMinPixels = _props.widthMinPixels,
          widthMaxPixels = _props.widthMaxPixels,
          dashJustified = _props.dashJustified;


      uniforms = Object.assign({}, uniforms, {
        jointType: Number(rounded),
        alignMode: Number(dashJustified),
        widthScale: widthScale,
        miterLimit: miterLimit,
        widthMinPixels: widthMinPixels,
        widthMaxPixels: widthMaxPixels
      });

      // Render the outline shadowmap (based on segment z orders)
      var _state = this.state,
          outlineFramebuffer = _state.outlineFramebuffer,
          dummyTexture = _state.dummyTexture;

      outlineFramebuffer.resize();
      outlineFramebuffer.clear({ color: true, depth: true });

      this.state.model.updateModuleSettings(Object.assign({}, moduleParameters, {
        outlineEnabled: true,
        outlineRenderShadowmap: true,
        outlineShadowmap: dummyTexture
      }));

      this.state.model.draw({
        uniforms: Object.assign({}, uniforms, {
          jointType: 0,
          widthScale: this.props.widthScale * 1.3
        }),
        parameters: {
          depthTest: false,
          blendEquation: GL.MAX // Biggest value needs to go into buffer
        },
        framebuffer: outlineFramebuffer
      });

      // Now use the outline shadowmap to render the lines (with outlines)
      this.state.model.updateModuleSettings(Object.assign({}, moduleParameters, {
        outlineEnabled: true,
        outlineRenderShadowmap: false,
        outlineShadowmap: outlineFramebuffer
      }));
      this.state.model.draw({
        uniforms: Object.assign({}, uniforms, {
          jointType: Number(rounded),
          widthScale: this.props.widthScale
        }),
        parameters: {
          depthTest: false
        }
      });
    }
  }, {
    key: 'calculateZLevels',
    value: function calculateZLevels(attribute) {
      var _props2 = this.props,
          data = _props2.data,
          getZLevel = _props2.getZLevel;
      var paths = this.state.paths;
      var value = attribute.value;


      var i = 0;
      paths.forEach(function (path, index) {
        var zLevel = getZLevel(data[index], index);
        zLevel = isNaN(zLevel) ? 0 : zLevel;
        for (var ptIndex = 1; ptIndex < path.length; ptIndex++) {
          value[i++] = zLevel;
        }
      });
    }
  }]);

  return PathOutlineLayer;
}(PathLayer);

export default PathOutlineLayer;


PathOutlineLayer.layerName = 'PathOutlineLayer';
PathOutlineLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,