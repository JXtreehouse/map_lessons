var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// getValue takes an array of points returns a value to sort the bins on.
// by default it returns the number of points
// this is where to pass in a function to color the bins by
// avg/mean/max of specific value of the point
var defaultGetValue = function defaultGetValue(points) {
  return points.length;
};

var BinSorter = function () {
  function BinSorter() {
    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var getValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetValue;

    _classCallCheck(this, BinSorter);

    this.sortedBins = this.getSortedBins(bins, getValue);
    this.maxCount = this.getMaxCount();
    this.binMap = this.getBinMap();
  }

  /**
   * Get an array of object with sorted values and index of bins
   * @param {Array} bins
   * @param {Function} getValue
   * @return {Array} array of values and index lookup
   */


  _createClass(BinSorter, [{
    key: "getSortedBins",
    value: function getSortedBins(bins, getValue) {
      return bins.reduce(function (accu, h, i) {
        var value = getValue(h.points);

        if (value !== null && value !== undefined) {
          // filter bins if value is null or undefined
          accu.push({
            i: Number.isFinite(h.index) ? h.index : i,
            value: value,
            counts: h.points.length
          });
        }

        return accu;
      }, []).sort(function (a, b) {
        return a.value - b.value;
      });
    }

    /**
     * Get range of values of all bins
     * @param {Number[]} range
     * @param {Number} range[0] - lower bound
     * @param {Number} range[1] - upper bound
     * @return {Array} array of new value range
     */

  }, {
    key: "getValueRange",
    value: function getValueRange(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          lower = _ref2[0],
          upper = _ref2[1];

      var len = this.sortedBins.length;
      if (!len) {
        return [0, 0];
      }
      var lowerIdx = Math.ceil(lower / 100 * (len - 1));
      var upperIdx = Math.floor(upper / 100 * (len - 1));

      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];
    }

    /**
     * Get ths max count of all bins
     * @return {Number | Boolean} max count
     */

  }, {
    key: "getMaxCount",
    value: function getMaxCount() {
      return Math.max.apply(Math, _toConsumableArray(this.sortedBins.map(function (b) {
        return b.counts;
      })));
    }

    /**
     * Get a mapping from cell/hexagon index to sorted bin
     * This is used to retrieve bin value for color calculation
     * @return {Object} bin index to sortedBins
     */

  }, {
    key: "getBinMap",
    value: function getBinMap() {
      return this.sortedBins.reduce(function (mapper, curr) {
        return Object.assign(mapper, _defineProperty({}, curr.i, curr));
      }, {});
    }
  }]);

  return BinSorter;
}();

export default BinSorter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL3V0aWxzL2Jpbi1zb3J0ZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdEdldFZhbHVlIiwicG9pbnRzIiwibGVuZ3RoIiwiQmluU29ydGVyIiwiYmlucyIsImdldFZhbHVlIiwic29ydGVkQmlucyIsImdldFNvcnRlZEJpbnMiLCJtYXhDb3VudCIsImdldE1heENvdW50IiwiYmluTWFwIiwiZ2V0QmluTWFwIiwicmVkdWNlIiwiYWNjdSIsImgiLCJpIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJwdXNoIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJpbmRleCIsImNvdW50cyIsInNvcnQiLCJhIiwiYiIsImxvd2VyIiwidXBwZXIiLCJsZW4iLCJsb3dlcklkeCIsIk1hdGgiLCJjZWlsIiwidXBwZXJJZHgiLCJmbG9vciIsIm1heCIsIm1hcCIsIm1hcHBlciIsImN1cnIiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLGtCQUFrQixTQUFsQkEsZUFBa0I7QUFBQSxTQUFVQyxPQUFPQyxNQUFqQjtBQUFBLENBQXhCOztJQUVxQkMsUztBQUNuQix1QkFBbUQ7QUFBQSxRQUF2Q0MsSUFBdUMsdUVBQWhDLEVBQWdDO0FBQUEsUUFBNUJDLFFBQTRCLHVFQUFqQkwsZUFBaUI7O0FBQUE7O0FBQ2pELFNBQUtNLFVBQUwsR0FBa0IsS0FBS0MsYUFBTCxDQUFtQkgsSUFBbkIsRUFBeUJDLFFBQXpCLENBQWxCO0FBQ0EsU0FBS0csUUFBTCxHQUFnQixLQUFLQyxXQUFMLEVBQWhCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLEtBQUtDLFNBQUwsRUFBZDtBQUNEOztBQUVEOzs7Ozs7Ozs7O2tDQU1jUCxJLEVBQU1DLFEsRUFBVTtBQUM1QixhQUFPRCxLQUNKUSxNQURJLENBQ0csVUFBQ0MsSUFBRCxFQUFPQyxDQUFQLEVBQVVDLENBQVYsRUFBZ0I7QUFDdEIsWUFBTUMsUUFBUVgsU0FBU1MsRUFBRWIsTUFBWCxDQUFkOztBQUVBLFlBQUllLFVBQVUsSUFBVixJQUFrQkEsVUFBVUMsU0FBaEMsRUFBMkM7QUFDekM7QUFDQUosZUFBS0ssSUFBTCxDQUFVO0FBQ1JILGVBQUdJLE9BQU9DLFFBQVAsQ0FBZ0JOLEVBQUVPLEtBQWxCLElBQTJCUCxFQUFFTyxLQUE3QixHQUFxQ04sQ0FEaEM7QUFFUkMsd0JBRlE7QUFHUk0sb0JBQVFSLEVBQUViLE1BQUYsQ0FBU0M7QUFIVCxXQUFWO0FBS0Q7O0FBRUQsZUFBT1csSUFBUDtBQUNELE9BZEksRUFjRixFQWRFLEVBZUpVLElBZkksQ0FlQyxVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxlQUFVRCxFQUFFUixLQUFGLEdBQVVTLEVBQUVULEtBQXRCO0FBQUEsT0FmRCxDQUFQO0FBZ0JEOztBQUVEOzs7Ozs7Ozs7O3dDQU84QjtBQUFBO0FBQUEsVUFBZlUsS0FBZTtBQUFBLFVBQVJDLEtBQVE7O0FBQzVCLFVBQU1DLE1BQU0sS0FBS3RCLFVBQUwsQ0FBZ0JKLE1BQTVCO0FBQ0EsVUFBSSxDQUFDMEIsR0FBTCxFQUFVO0FBQ1IsZUFBTyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVA7QUFDRDtBQUNELFVBQU1DLFdBQVdDLEtBQUtDLElBQUwsQ0FBVUwsUUFBUSxHQUFSLElBQWVFLE1BQU0sQ0FBckIsQ0FBVixDQUFqQjtBQUNBLFVBQU1JLFdBQVdGLEtBQUtHLEtBQUwsQ0FBV04sUUFBUSxHQUFSLElBQWVDLE1BQU0sQ0FBckIsQ0FBWCxDQUFqQjs7QUFFQSxhQUFPLENBQUMsS0FBS3RCLFVBQUwsQ0FBZ0J1QixRQUFoQixFQUEwQmIsS0FBM0IsRUFBa0MsS0FBS1YsVUFBTCxDQUFnQjBCLFFBQWhCLEVBQTBCaEIsS0FBNUQsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7O2tDQUljO0FBQ1osYUFBT2MsS0FBS0ksR0FBTCxnQ0FBWSxLQUFLNUIsVUFBTCxDQUFnQjZCLEdBQWhCLENBQW9CO0FBQUEsZUFBS1YsRUFBRUgsTUFBUDtBQUFBLE9BQXBCLENBQVosRUFBUDtBQUNEOztBQUVEOzs7Ozs7OztnQ0FLWTtBQUNWLGFBQU8sS0FBS2hCLFVBQUwsQ0FBZ0JNLE1BQWhCLENBQ0wsVUFBQ3dCLE1BQUQsRUFBU0MsSUFBVDtBQUFBLGVBQ0VDLE9BQU9DLE1BQVAsQ0FBY0gsTUFBZCxzQkFDR0MsS0FBS3RCLENBRFIsRUFDWXNCLElBRFosRUFERjtBQUFBLE9BREssRUFLTCxFQUxLLENBQVA7QUFPRDs7Ozs7O2VBdkVrQmxDLFMiLCJmaWxlIjoiYmluLXNvcnRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vLyBnZXRWYWx1ZSB0YWtlcyBhbiBhcnJheSBvZiBwb2ludHMgcmV0dXJucyBhIHZhbHVlIHRvIHNvcnQgdGhlIGJpbnMgb24uXG4vLyBieSBkZWZhdWx0IGl0IHJldHVybnMgdGhlIG51bWJlciBvZiBwb2ludHNcbi8vIHRoaXMgaXMgd2hlcmUgdG8gcGFzcyBpbiBhIGZ1bmN0aW9uIHRvIGNvbG9yIHRoZSBiaW5zIGJ5XG4vLyBhdmcvbWVhbi9tYXggb2Ygc3BlY2lmaWMgdmFsdWUgb2YgdGhlIHBvaW50XG5jb25zdCBkZWZhdWx0R2V0VmFsdWUgPSBwb2ludHMgPT4gcG9pbnRzLmxlbmd0aDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluU29ydGVyIHtcbiAgY29uc3RydWN0b3IoYmlucyA9IFtdLCBnZXRWYWx1ZSA9IGRlZmF1bHRHZXRWYWx1ZSkge1xuICAgIHRoaXMuc29ydGVkQmlucyA9IHRoaXMuZ2V0U29ydGVkQmlucyhiaW5zLCBnZXRWYWx1ZSk7XG4gICAgdGhpcy5tYXhDb3VudCA9IHRoaXMuZ2V0TWF4Q291bnQoKTtcbiAgICB0aGlzLmJpbk1hcCA9IHRoaXMuZ2V0QmluTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIG9iamVjdCB3aXRoIHNvcnRlZCB2YWx1ZXMgYW5kIGluZGV4IG9mIGJpbnNcbiAgICogQHBhcmFtIHtBcnJheX0gYmluc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRWYWx1ZVxuICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgdmFsdWVzIGFuZCBpbmRleCBsb29rdXBcbiAgICovXG4gIGdldFNvcnRlZEJpbnMoYmlucywgZ2V0VmFsdWUpIHtcbiAgICByZXR1cm4gYmluc1xuICAgICAgLnJlZHVjZSgoYWNjdSwgaCwgaSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFZhbHVlKGgucG9pbnRzKTtcblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIGZpbHRlciBiaW5zIGlmIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgYWNjdS5wdXNoKHtcbiAgICAgICAgICAgIGk6IE51bWJlci5pc0Zpbml0ZShoLmluZGV4KSA/IGguaW5kZXggOiBpLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBjb3VudHM6IGgucG9pbnRzLmxlbmd0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFjY3U7XG4gICAgICB9LCBbXSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnZhbHVlIC0gYi52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHJhbmdlIG9mIHZhbHVlcyBvZiBhbGwgYmluc1xuICAgKiBAcGFyYW0ge051bWJlcltdfSByYW5nZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFuZ2VbMF0gLSBsb3dlciBib3VuZFxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFuZ2VbMV0gLSB1cHBlciBib3VuZFxuICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgbmV3IHZhbHVlIHJhbmdlXG4gICAqL1xuICBnZXRWYWx1ZVJhbmdlKFtsb3dlciwgdXBwZXJdKSB7XG4gICAgY29uc3QgbGVuID0gdGhpcy5zb3J0ZWRCaW5zLmxlbmd0aDtcbiAgICBpZiAoIWxlbikge1xuICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICB9XG4gICAgY29uc3QgbG93ZXJJZHggPSBNYXRoLmNlaWwobG93ZXIgLyAxMDAgKiAobGVuIC0gMSkpO1xuICAgIGNvbnN0IHVwcGVySWR4ID0gTWF0aC5mbG9vcih1cHBlciAvIDEwMCAqIChsZW4gLSAxKSk7XG5cbiAgICByZXR1cm4gW3RoaXMuc29ydGVkQmluc1tsb3dlcklkeF0udmFsdWUsIHRoaXMuc29ydGVkQmluc1t1cHBlcklkeF0udmFsdWVdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aHMgbWF4IGNvdW50IG9mIGFsbCBiaW5zXG4gICAqIEByZXR1cm4ge051bWJlciB8IEJvb2xlYW59IG1heCBjb3VudFxuICAgKi9cbiAgZ2V0TWF4Q291bnQoKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KC4uLnRoaXMuc29ydGVkQmlucy5tYXAoYiA9PiBiLmNvdW50cykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIG1hcHBpbmcgZnJvbSBjZWxsL2hleGFnb24gaW5kZXggdG8gc29ydGVkIGJpblxuICAgKiBUaGlzIGlzIHVzZWQgdG8gcmV0cmlldmUgYmluIHZhbHVlIGZvciBjb2xvciBjYWxjdWxhdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGJpbiBpbmRleCB0byBzb3J0ZWRCaW5zXG4gICAqL1xuICBnZXRCaW5NYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc29ydGVkQmlucy5yZWR1Y2UoXG4gICAgICAobWFwcGVyLCBjdXJyKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKG1hcHBlciwge1xuICAgICAgICAgIFtjdXJyLmldOiBjdXJyXG4gICAgICAgIH0pLFxuICAgICAge31cbiAgICApO1xuICB9XG59XG4iXX0=