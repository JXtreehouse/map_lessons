var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { Vector3, experimental } from 'math.gl';
var SphericalCoordinates = experimental.SphericalCoordinates;

import assert from 'assert';

var defaultState = {
  position: [0, 0, 0],
  lookAt: [0, 0, 0],
  up: [0, 0, 1],

  rotationX: 0,
  rotationY: 0,

  fov: 50,
  near: 1,
  far: 100
};

/* Helpers */

function ensureFinite(value, fallbackValue) {
  return Number.isFinite(value) ? value : fallbackValue;
}

var DEFAULT_POSITION = [0, 0, 0];

var ViewState = function () {
  function ViewState(opts) {
    _classCallCheck(this, ViewState);

    var width = opts.width,
        height = opts.height,
        _opts$position = opts.position,
        position = _opts$position === undefined ? DEFAULT_POSITION : _opts$position,
        bearing = opts.bearing,
        pitch = opts.pitch,
        longitude = opts.longitude,
        latitude = opts.latitude,
        zoom = opts.zoom;


    assert(Number.isFinite(width), '`width` must be supplied');
    assert(Number.isFinite(height), '`height` must be supplied');

    this._viewportProps = this._applyConstraints(Object.assign({}, opts, {
      width: width,
      height: height,
      position: new Vector3(ensureFinite(position && position[0], defaultState.position[0]), ensureFinite(position && position[1], defaultState.position[1]), ensureFinite(position && position[2], defaultState.position[2])),
      bearing: ensureFinite(bearing, defaultState.bearing),
      pitch: ensureFinite(pitch, defaultState.pitch),
      longitude: longitude,
      latitude: latitude,
      zoom: zoom
    }));
  }

  _createClass(ViewState, [{
    key: 'getViewportProps',
    value: function getViewportProps() {
      return this._viewportProps;
    }
  }, {
    key: 'getDirection',
    value: function getDirection() {
      var spherical = new SphericalCoordinates({
        bearing: this._viewportProps.bearing,
        pitch: this._viewportProps.pitch
      });
      var direction = spherical.toVector3().normalize();
      return direction;
    }
  }, {
    key: 'getDirectionFromBearing',
    value: function getDirectionFromBearing(bearing) {
      var spherical = new SphericalCoordinates({
        bearing: bearing,
        pitch: 90
      });
      var direction = spherical.toVector3().normalize();
      return direction;
    }

    // Redefined by subclass
    // Apply any constraints (mathematical or defined by _viewportProps) to map state

  }, {
    key: '_applyConstraints',
    value: function _applyConstraints(props) {
      return props;
    }
  }]);

  return ViewState;
}();

export default ViewState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2NvbnRyb2xsZXJzL3ZpZXctc3RhdGUuanMiXSwibmFtZXMiOlsiVmVjdG9yMyIsImV4cGVyaW1lbnRhbCIsIlNwaGVyaWNhbENvb3JkaW5hdGVzIiwiYXNzZXJ0IiwiZGVmYXVsdFN0YXRlIiwicG9zaXRpb24iLCJsb29rQXQiLCJ1cCIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsImZvdiIsIm5lYXIiLCJmYXIiLCJlbnN1cmVGaW5pdGUiLCJ2YWx1ZSIsImZhbGxiYWNrVmFsdWUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIkRFRkFVTFRfUE9TSVRJT04iLCJWaWV3U3RhdGUiLCJvcHRzIiwid2lkdGgiLCJoZWlnaHQiLCJiZWFyaW5nIiwicGl0Y2giLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsInpvb20iLCJfdmlld3BvcnRQcm9wcyIsIl9hcHBseUNvbnN0cmFpbnRzIiwiT2JqZWN0IiwiYXNzaWduIiwic3BoZXJpY2FsIiwiZGlyZWN0aW9uIiwidG9WZWN0b3IzIiwibm9ybWFsaXplIiwicHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFRQSxPQUFSLEVBQWlCQyxZQUFqQixRQUFvQyxTQUFwQztJQUNPQyxvQixHQUF3QkQsWSxDQUF4QkMsb0I7O0FBQ1AsT0FBT0MsTUFBUCxNQUFtQixRQUFuQjs7QUFFQSxJQUFNQyxlQUFlO0FBQ25CQyxZQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBRFM7QUFFbkJDLFVBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FGVztBQUduQkMsTUFBSSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUhlOztBQUtuQkMsYUFBVyxDQUxRO0FBTW5CQyxhQUFXLENBTlE7O0FBUW5CQyxPQUFLLEVBUmM7QUFTbkJDLFFBQU0sQ0FUYTtBQVVuQkMsT0FBSztBQVZjLENBQXJCOztBQWFBOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxhQUE3QixFQUE0QztBQUMxQyxTQUFPQyxPQUFPQyxRQUFQLENBQWdCSCxLQUFoQixJQUF5QkEsS0FBekIsR0FBaUNDLGFBQXhDO0FBQ0Q7O0FBRUQsSUFBTUcsbUJBQW1CLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQXpCOztJQUVxQkMsUztBQUNuQixxQkFBWUMsSUFBWixFQUFrQjtBQUFBOztBQUFBLFFBR2RDLEtBSGMsR0FnQlpELElBaEJZLENBR2RDLEtBSGM7QUFBQSxRQUlkQyxNQUpjLEdBZ0JaRixJQWhCWSxDQUlkRSxNQUpjO0FBQUEseUJBZ0JaRixJQWhCWSxDQU9kZixRQVBjO0FBQUEsUUFPZEEsUUFQYyxrQ0FPSGEsZ0JBUEc7QUFBQSxRQVNkSyxPQVRjLEdBZ0JaSCxJQWhCWSxDQVNkRyxPQVRjO0FBQUEsUUFVZEMsS0FWYyxHQWdCWkosSUFoQlksQ0FVZEksS0FWYztBQUFBLFFBYWRDLFNBYmMsR0FnQlpMLElBaEJZLENBYWRLLFNBYmM7QUFBQSxRQWNkQyxRQWRjLEdBZ0JaTixJQWhCWSxDQWNkTSxRQWRjO0FBQUEsUUFlZEMsSUFmYyxHQWdCWlAsSUFoQlksQ0FlZE8sSUFmYzs7O0FBa0JoQnhCLFdBQU9hLE9BQU9DLFFBQVAsQ0FBZ0JJLEtBQWhCLENBQVAsRUFBK0IsMEJBQS9CO0FBQ0FsQixXQUFPYSxPQUFPQyxRQUFQLENBQWdCSyxNQUFoQixDQUFQLEVBQWdDLDJCQUFoQzs7QUFFQSxTQUFLTSxjQUFMLEdBQXNCLEtBQUtDLGlCQUFMLENBQ3BCQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQlgsSUFBbEIsRUFBd0I7QUFDdEJDLGtCQURzQjtBQUV0QkMsb0JBRnNCO0FBR3RCakIsZ0JBQVUsSUFBSUwsT0FBSixDQUNSYSxhQUFhUixZQUFZQSxTQUFTLENBQVQsQ0FBekIsRUFBc0NELGFBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBdEMsQ0FEUSxFQUVSUSxhQUFhUixZQUFZQSxTQUFTLENBQVQsQ0FBekIsRUFBc0NELGFBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBdEMsQ0FGUSxFQUdSUSxhQUFhUixZQUFZQSxTQUFTLENBQVQsQ0FBekIsRUFBc0NELGFBQWFDLFFBQWIsQ0FBc0IsQ0FBdEIsQ0FBdEMsQ0FIUSxDQUhZO0FBUXRCa0IsZUFBU1YsYUFBYVUsT0FBYixFQUFzQm5CLGFBQWFtQixPQUFuQyxDQVJhO0FBU3RCQyxhQUFPWCxhQUFhVyxLQUFiLEVBQW9CcEIsYUFBYW9CLEtBQWpDLENBVGU7QUFVdEJDLDBCQVZzQjtBQVd0QkMsd0JBWHNCO0FBWXRCQztBQVpzQixLQUF4QixDQURvQixDQUF0QjtBQWdCRDs7Ozt1Q0FFa0I7QUFDakIsYUFBTyxLQUFLQyxjQUFaO0FBQ0Q7OzttQ0FFYztBQUNiLFVBQU1JLFlBQVksSUFBSTlCLG9CQUFKLENBQXlCO0FBQ3pDcUIsaUJBQVMsS0FBS0ssY0FBTCxDQUFvQkwsT0FEWTtBQUV6Q0MsZUFBTyxLQUFLSSxjQUFMLENBQW9CSjtBQUZjLE9BQXpCLENBQWxCO0FBSUEsVUFBTVMsWUFBWUQsVUFBVUUsU0FBVixHQUFzQkMsU0FBdEIsRUFBbEI7QUFDQSxhQUFPRixTQUFQO0FBQ0Q7Ozs0Q0FFdUJWLE8sRUFBUztBQUMvQixVQUFNUyxZQUFZLElBQUk5QixvQkFBSixDQUF5QjtBQUN6Q3FCLHdCQUR5QztBQUV6Q0MsZUFBTztBQUZrQyxPQUF6QixDQUFsQjtBQUlBLFVBQU1TLFlBQVlELFVBQVVFLFNBQVYsR0FBc0JDLFNBQXRCLEVBQWxCO0FBQ0EsYUFBT0YsU0FBUDtBQUNEOztBQUVEO0FBQ0E7Ozs7c0NBQ2tCRyxLLEVBQU87QUFDdkIsYUFBT0EsS0FBUDtBQUNEOzs7Ozs7ZUFsRWtCakIsUyIsImZpbGUiOiJ2aWV3LXN0YXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZWN0b3IzLCBleHBlcmltZW50YWx9IGZyb20gJ21hdGguZ2wnO1xuY29uc3Qge1NwaGVyaWNhbENvb3JkaW5hdGVzfSA9IGV4cGVyaW1lbnRhbDtcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICBwb3NpdGlvbjogWzAsIDAsIDBdLFxuICBsb29rQXQ6IFswLCAwLCAwXSxcbiAgdXA6IFswLCAwLCAxXSxcblxuICByb3RhdGlvblg6IDAsXG4gIHJvdGF0aW9uWTogMCxcblxuICBmb3Y6IDUwLFxuICBuZWFyOiAxLFxuICBmYXI6IDEwMFxufTtcblxuLyogSGVscGVycyAqL1xuXG5mdW5jdGlvbiBlbnN1cmVGaW5pdGUodmFsdWUsIGZhbGxiYWNrVmFsdWUpIHtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGZhbGxiYWNrVmFsdWU7XG59XG5cbmNvbnN0IERFRkFVTFRfUE9TSVRJT04gPSBbMCwgMCwgMF07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAvKiBWaWV3cG9ydCBhcmd1bWVudHMgKi9cbiAgICAgIHdpZHRoLCAvLyBXaWR0aCBvZiB2aWV3cG9ydFxuICAgICAgaGVpZ2h0LCAvLyBIZWlnaHQgb2Ygdmlld3BvcnRcblxuICAgICAgLy8gUG9zaXRpb24gYW5kIG9yaWVudGF0aW9uXG4gICAgICBwb3NpdGlvbiA9IERFRkFVTFRfUE9TSVRJT04sIC8vIHR5cGljYWxseSBpbiBtZXRlcnMgZnJvbSBhbmNob3IgcG9pbnRcblxuICAgICAgYmVhcmluZywgLy8gUm90YXRpb24gYXJvdW5kIHkgYXhpc1xuICAgICAgcGl0Y2gsIC8vIFJvdGF0aW9uIGFyb3VuZCB4IGF4aXNcblxuICAgICAgLy8gR2Vvc3BhdGlhbCBhbmNob3JcbiAgICAgIGxvbmdpdHVkZSxcbiAgICAgIGxhdGl0dWRlLFxuICAgICAgem9vbVxuICAgIH0gPSBvcHRzO1xuXG4gICAgYXNzZXJ0KE51bWJlci5pc0Zpbml0ZSh3aWR0aCksICdgd2lkdGhgIG11c3QgYmUgc3VwcGxpZWQnKTtcbiAgICBhc3NlcnQoTnVtYmVyLmlzRmluaXRlKGhlaWdodCksICdgaGVpZ2h0YCBtdXN0IGJlIHN1cHBsaWVkJyk7XG5cbiAgICB0aGlzLl92aWV3cG9ydFByb3BzID0gdGhpcy5fYXBwbHlDb25zdHJhaW50cyhcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKFxuICAgICAgICAgIGVuc3VyZUZpbml0ZShwb3NpdGlvbiAmJiBwb3NpdGlvblswXSwgZGVmYXVsdFN0YXRlLnBvc2l0aW9uWzBdKSxcbiAgICAgICAgICBlbnN1cmVGaW5pdGUocG9zaXRpb24gJiYgcG9zaXRpb25bMV0sIGRlZmF1bHRTdGF0ZS5wb3NpdGlvblsxXSksXG4gICAgICAgICAgZW5zdXJlRmluaXRlKHBvc2l0aW9uICYmIHBvc2l0aW9uWzJdLCBkZWZhdWx0U3RhdGUucG9zaXRpb25bMl0pXG4gICAgICAgICksXG4gICAgICAgIGJlYXJpbmc6IGVuc3VyZUZpbml0ZShiZWFyaW5nLCBkZWZhdWx0U3RhdGUuYmVhcmluZyksXG4gICAgICAgIHBpdGNoOiBlbnN1cmVGaW5pdGUocGl0Y2gsIGRlZmF1bHRTdGF0ZS5waXRjaCksXG4gICAgICAgIGxvbmdpdHVkZSxcbiAgICAgICAgbGF0aXR1ZGUsXG4gICAgICAgIHpvb21cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGdldFZpZXdwb3J0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdwb3J0UHJvcHM7XG4gIH1cblxuICBnZXREaXJlY3Rpb24oKSB7XG4gICAgY29uc3Qgc3BoZXJpY2FsID0gbmV3IFNwaGVyaWNhbENvb3JkaW5hdGVzKHtcbiAgICAgIGJlYXJpbmc6IHRoaXMuX3ZpZXdwb3J0UHJvcHMuYmVhcmluZyxcbiAgICAgIHBpdGNoOiB0aGlzLl92aWV3cG9ydFByb3BzLnBpdGNoXG4gICAgfSk7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gc3BoZXJpY2FsLnRvVmVjdG9yMygpLm5vcm1hbGl6ZSgpO1xuICAgIHJldHVybiBkaXJlY3Rpb247XG4gIH1cblxuICBnZXREaXJlY3Rpb25Gcm9tQmVhcmluZyhiZWFyaW5nKSB7XG4gICAgY29uc3Qgc3BoZXJpY2FsID0gbmV3IFNwaGVyaWNhbENvb3JkaW5hdGVzKHtcbiAgICAgIGJlYXJpbmcsXG4gICAgICBwaXRjaDogOTBcbiAgICB9KTtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBzcGhlcmljYWwudG9WZWN0b3IzKCkubm9ybWFsaXplKCk7XG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgfVxuXG4gIC8vIFJlZGVmaW5lZCBieSBzdWJjbGFzc1xuICAvLyBBcHBseSBhbnkgY29uc3RyYWludHMgKG1hdGhlbWF0aWNhbCBvciBkZWZpbmVkIGJ5IF92aWV3cG9ydFByb3BzKSB0byBtYXAgc3RhdGVcbiAgX2FwcGx5Q29uc3RyYWludHMocHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbn1cbiJdfQ==