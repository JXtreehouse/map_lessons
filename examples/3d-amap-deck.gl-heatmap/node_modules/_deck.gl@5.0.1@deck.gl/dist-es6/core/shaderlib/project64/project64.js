// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { fp64 } from 'luma.gl';
import project from '../project/project';

import project64Shader from './project64.glsl';

export default {
  name: 'project64',
  dependencies: [project, fp64],
  vs: project64Shader,
  getUniforms: getUniforms,
  deprecations: [{ type: 'uniform vec2', old: 'projectionFP64[16]', new: 'project_uViewProjectionMatrixFP64' }, { type: 'uniform vec2', old: 'projectionScaleFP64', new: 'project64_uScale' }]
};

// TODO - this module should calculate the 64 bit uniforms
// It is currently done by project to minimize duplicated work

var DEFAULT_MODULE_OPTIONS = {};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  return {};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3NoYWRlcmxpYi9wcm9qZWN0NjQvcHJvamVjdDY0LmpzIl0sIm5hbWVzIjpbImZwNjQiLCJwcm9qZWN0IiwicHJvamVjdDY0U2hhZGVyIiwibmFtZSIsImRlcGVuZGVuY2llcyIsInZzIiwiZ2V0VW5pZm9ybXMiLCJkZXByZWNhdGlvbnMiLCJ0eXBlIiwib2xkIiwibmV3IiwiREVGQVVMVF9NT0RVTEVfT1BUSU9OUyIsIm9wdHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVFBLElBQVIsUUFBbUIsU0FBbkI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLG9CQUFwQjs7QUFFQSxPQUFPQyxlQUFQLE1BQTRCLGtCQUE1Qjs7QUFFQSxlQUFlO0FBQ2JDLFFBQU0sV0FETztBQUViQyxnQkFBYyxDQUFDSCxPQUFELEVBQVVELElBQVYsQ0FGRDtBQUdiSyxNQUFJSCxlQUhTO0FBSWJJLDBCQUphO0FBS2JDLGdCQUFjLENBQ1osRUFBQ0MsTUFBTSxjQUFQLEVBQXVCQyxLQUFLLG9CQUE1QixFQUFrREMsS0FBSyxtQ0FBdkQsRUFEWSxFQUVaLEVBQUNGLE1BQU0sY0FBUCxFQUF1QkMsS0FBSyxxQkFBNUIsRUFBbURDLEtBQUssa0JBQXhELEVBRlk7QUFMRCxDQUFmOztBQVdBO0FBQ0E7O0FBRUEsSUFBTUMseUJBQXlCLEVBQS9COztBQUVBLFNBQVNMLFdBQVQsR0FBb0Q7QUFBQSxNQUEvQk0sSUFBK0IsdUVBQXhCRCxzQkFBd0I7O0FBQ2xELFNBQU8sRUFBUDtBQUNEIiwiZmlsZSI6InByb2plY3Q2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2ZwNjR9IGZyb20gJ2x1bWEuZ2wnO1xuaW1wb3J0IHByb2plY3QgZnJvbSAnLi4vcHJvamVjdC9wcm9qZWN0JztcblxuaW1wb3J0IHByb2plY3Q2NFNoYWRlciBmcm9tICcuL3Byb2plY3Q2NC5nbHNsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJvamVjdDY0JyxcbiAgZGVwZW5kZW5jaWVzOiBbcHJvamVjdCwgZnA2NF0sXG4gIHZzOiBwcm9qZWN0NjRTaGFkZXIsXG4gIGdldFVuaWZvcm1zLFxuICBkZXByZWNhdGlvbnM6IFtcbiAgICB7dHlwZTogJ3VuaWZvcm0gdmVjMicsIG9sZDogJ3Byb2plY3Rpb25GUDY0WzE2XScsIG5ldzogJ3Byb2plY3RfdVZpZXdQcm9qZWN0aW9uTWF0cml4RlA2NCd9LFxuICAgIHt0eXBlOiAndW5pZm9ybSB2ZWMyJywgb2xkOiAncHJvamVjdGlvblNjYWxlRlA2NCcsIG5ldzogJ3Byb2plY3Q2NF91U2NhbGUnfVxuICBdXG59O1xuXG4vLyBUT0RPIC0gdGhpcyBtb2R1bGUgc2hvdWxkIGNhbGN1bGF0ZSB0aGUgNjQgYml0IHVuaWZvcm1zXG4vLyBJdCBpcyBjdXJyZW50bHkgZG9uZSBieSBwcm9qZWN0IHRvIG1pbmltaXplIGR1cGxpY2F0ZWQgd29ya1xuXG5jb25zdCBERUZBVUxUX01PRFVMRV9PUFRJT05TID0ge307XG5cbmZ1bmN0aW9uIGdldFVuaWZvcm1zKG9wdHMgPSBERUZBVUxUX01PRFVMRV9PUFRJT05TKSB7XG4gIHJldHVybiB7fTtcbn1cbiJdfQ==