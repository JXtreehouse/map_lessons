// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

export default "// EXTERNAL CONSTANTS: these must match JavaScript constants in \"src/lib/constants.js\"\nconst float COORDINATE_SYSTEM_IDENTITY = 0.;\nconst float COORDINATE_SYSTEM_LNG_LAT = 1.;\nconst float COORDINATE_SYSTEM_METER_OFFSETS = 2.;\nconst float COORDINATE_SYSTEM_LNGLAT_OFFSETS = 3.;\n\nuniform float project_uCoordinateSystem;\nuniform float project_uScale;\nuniform vec3 project_uPixelsPerMeter;\nuniform vec3 project_uPixelsPerDegree;\nuniform vec3 project_uPixelsPerUnit;\nuniform vec3 project_uPixelsPerUnit2;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\n\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\n\n//\n// Scaling offsets - scales meters to \"pixels\"\n// Note the scalar version of project_scale is for scaling the z component only\n//\nfloat project_scale(float meters) {\n  return meters * project_uPixelsPerMeter.z;\n}\n\nvec2 project_scale(vec2 meters) {\n  return meters * project_uPixelsPerMeter.xy;\n}\n\nvec3 project_scale(vec3 meters) {\n  return meters * project_uPixelsPerMeter;\n}\n\nvec4 project_scale(vec4 meters) {\n  return vec4(meters.xyz * project_uPixelsPerMeter, meters.w);\n}\n\n//\n// Projecting normal - transform deltas from current coordinate system to\n// normals in the worldspace\n//\nvec3 project_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return normalize(vector * project_uPixelsPerDegree);\n  }\n  return normalize(vector * project_uPixelsPerMeter);\n}\n\nvec4 project_offset_(vec4 offset) {\n  vec3 pixelsPerUnit = project_uPixelsPerUnit + project_uPixelsPerUnit2 * offset.y;\n  return vec4(offset.xyz * pixelsPerUnit, offset.w);\n}\n\n//\n// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]\n//\nvec2 project_mercator_(vec2 lnglat) {\n  return vec2(\n    radians(lnglat.x) + PI,\n    PI - log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5))\n  );\n}\n\n//\n// Projects lnglats (or meter offsets, depending on mode) to pixels\n//\nvec4 project_position(vec4 position) {\n  // TODO - why not simply subtract center and fall through?\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT) {\n    return project_uModelMatrix * vec4(\n      project_mercator_(position.xy) * WORLD_SCALE * project_uScale,\n      project_scale(position.z),\n      position.w\n    );\n  }\n\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return project_offset_(position);\n  }\n\n  // METER_OFFSETS or IDENTITY\n  // Apply model matrix\n  vec4 position_modelspace = project_uModelMatrix * position;\n  return project_offset_(position_modelspace);\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0));\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0));\n  return projected_position.xy;\n}\n\n//\n// Projects from \"world\" coordinates to clip space.\n// Uses project_uViewProjectionMatrix\n//\nvec4 project_to_clipspace(vec4 position) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_METER_OFFSETS ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    // Needs to be divided with project_uPixelsPerMeter\n    position.w *= project_uPixelsPerMeter.z;\n  }\n  return project_uViewProjectionMatrix * position + project_uCenter;\n}\n\n// Returns a clip space offset that corresponds to a given number of **non-device** pixels\nvec4 project_pixel_to_clipspace(vec2 pixels) {\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio;\n  return vec4(offset * project_uFocalDistance, 0.0, 0.0);\n}\n";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL3NoYWRlcmxpYi9wcm9qZWN0L3Byb2plY3QuZ2xzbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiJwcm9qZWN0Lmdsc2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuZXhwb3J0IGRlZmF1bHQgYFxcXG4vLyBFWFRFUk5BTCBDT05TVEFOVFM6IHRoZXNlIG11c3QgbWF0Y2ggSmF2YVNjcmlwdCBjb25zdGFudHMgaW4gXCJzcmMvbGliL2NvbnN0YW50cy5qc1wiXG5jb25zdCBmbG9hdCBDT09SRElOQVRFX1NZU1RFTV9JREVOVElUWSA9IDAuO1xuY29uc3QgZmxvYXQgQ09PUkRJTkFURV9TWVNURU1fTE5HX0xBVCA9IDEuO1xuY29uc3QgZmxvYXQgQ09PUkRJTkFURV9TWVNURU1fTUVURVJfT0ZGU0VUUyA9IDIuO1xuY29uc3QgZmxvYXQgQ09PUkRJTkFURV9TWVNURU1fTE5HTEFUX09GRlNFVFMgPSAzLjtcblxudW5pZm9ybSBmbG9hdCBwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtO1xudW5pZm9ybSBmbG9hdCBwcm9qZWN0X3VTY2FsZTtcbnVuaWZvcm0gdmVjMyBwcm9qZWN0X3VQaXhlbHNQZXJNZXRlcjtcbnVuaWZvcm0gdmVjMyBwcm9qZWN0X3VQaXhlbHNQZXJEZWdyZWU7XG51bmlmb3JtIHZlYzMgcHJvamVjdF91UGl4ZWxzUGVyVW5pdDtcbnVuaWZvcm0gdmVjMyBwcm9qZWN0X3VQaXhlbHNQZXJVbml0MjtcbnVuaWZvcm0gdmVjNCBwcm9qZWN0X3VDZW50ZXI7XG51bmlmb3JtIG1hdDQgcHJvamVjdF91TW9kZWxNYXRyaXg7XG51bmlmb3JtIG1hdDQgcHJvamVjdF91Vmlld1Byb2plY3Rpb25NYXRyaXg7XG51bmlmb3JtIHZlYzIgcHJvamVjdF91Vmlld3BvcnRTaXplO1xudW5pZm9ybSBmbG9hdCBwcm9qZWN0X3VEZXZpY2VQaXhlbFJhdGlvO1xudW5pZm9ybSBmbG9hdCBwcm9qZWN0X3VGb2NhbERpc3RhbmNlO1xudW5pZm9ybSB2ZWMzIHByb2plY3RfdUNhbWVyYVBvc2l0aW9uO1xuXG5jb25zdCBmbG9hdCBUSUxFX1NJWkUgPSA1MTIuMDtcbmNvbnN0IGZsb2F0IFBJID0gMy4xNDE1OTI2NTM2O1xuY29uc3QgZmxvYXQgV09STERfU0NBTEUgPSBUSUxFX1NJWkUgLyAoUEkgKiAyLjApO1xuXG4vL1xuLy8gU2NhbGluZyBvZmZzZXRzIC0gc2NhbGVzIG1ldGVycyB0byBcInBpeGVsc1wiXG4vLyBOb3RlIHRoZSBzY2FsYXIgdmVyc2lvbiBvZiBwcm9qZWN0X3NjYWxlIGlzIGZvciBzY2FsaW5nIHRoZSB6IGNvbXBvbmVudCBvbmx5XG4vL1xuZmxvYXQgcHJvamVjdF9zY2FsZShmbG9hdCBtZXRlcnMpIHtcbiAgcmV0dXJuIG1ldGVycyAqIHByb2plY3RfdVBpeGVsc1Blck1ldGVyLno7XG59XG5cbnZlYzIgcHJvamVjdF9zY2FsZSh2ZWMyIG1ldGVycykge1xuICByZXR1cm4gbWV0ZXJzICogcHJvamVjdF91UGl4ZWxzUGVyTWV0ZXIueHk7XG59XG5cbnZlYzMgcHJvamVjdF9zY2FsZSh2ZWMzIG1ldGVycykge1xuICByZXR1cm4gbWV0ZXJzICogcHJvamVjdF91UGl4ZWxzUGVyTWV0ZXI7XG59XG5cbnZlYzQgcHJvamVjdF9zY2FsZSh2ZWM0IG1ldGVycykge1xuICByZXR1cm4gdmVjNChtZXRlcnMueHl6ICogcHJvamVjdF91UGl4ZWxzUGVyTWV0ZXIsIG1ldGVycy53KTtcbn1cblxuLy9cbi8vIFByb2plY3Rpbmcgbm9ybWFsIC0gdHJhbnNmb3JtIGRlbHRhcyBmcm9tIGN1cnJlbnQgY29vcmRpbmF0ZSBzeXN0ZW0gdG9cbi8vIG5vcm1hbHMgaW4gdGhlIHdvcmxkc3BhY2Vcbi8vXG52ZWMzIHByb2plY3Rfbm9ybWFsKHZlYzMgdmVjdG9yKSB7XG4gIGlmIChwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX0xOR19MQVQgfHxcbiAgICBwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX0xOR0xBVF9PRkZTRVRTKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh2ZWN0b3IgKiBwcm9qZWN0X3VQaXhlbHNQZXJEZWdyZWUpO1xuICB9XG4gIHJldHVybiBub3JtYWxpemUodmVjdG9yICogcHJvamVjdF91UGl4ZWxzUGVyTWV0ZXIpO1xufVxuXG52ZWM0IHByb2plY3Rfb2Zmc2V0Xyh2ZWM0IG9mZnNldCkge1xuICB2ZWMzIHBpeGVsc1BlclVuaXQgPSBwcm9qZWN0X3VQaXhlbHNQZXJVbml0ICsgcHJvamVjdF91UGl4ZWxzUGVyVW5pdDIgKiBvZmZzZXQueTtcbiAgcmV0dXJuIHZlYzQob2Zmc2V0Lnh5eiAqIHBpeGVsc1BlclVuaXQsIG9mZnNldC53KTtcbn1cblxuLy9cbi8vIFByb2plY3RpbmcgcG9zaXRpb25zIC0gbm9uLWxpbmVhciBwcm9qZWN0aW9uOiBsbmdsYXRzID0+IHVuaXQgdGlsZSBbMC0xLCAwLTFdXG4vL1xudmVjMiBwcm9qZWN0X21lcmNhdG9yXyh2ZWMyIGxuZ2xhdCkge1xuICByZXR1cm4gdmVjMihcbiAgICByYWRpYW5zKGxuZ2xhdC54KSArIFBJLFxuICAgIFBJIC0gbG9nKHRhbl9mcDMyKFBJICogMC4yNSArIHJhZGlhbnMobG5nbGF0LnkpICogMC41KSlcbiAgKTtcbn1cblxuLy9cbi8vIFByb2plY3RzIGxuZ2xhdHMgKG9yIG1ldGVyIG9mZnNldHMsIGRlcGVuZGluZyBvbiBtb2RlKSB0byBwaXhlbHNcbi8vXG52ZWM0IHByb2plY3RfcG9zaXRpb24odmVjNCBwb3NpdGlvbikge1xuICAvLyBUT0RPIC0gd2h5IG5vdCBzaW1wbHkgc3VidHJhY3QgY2VudGVyIGFuZCBmYWxsIHRocm91Z2g/XG4gIGlmIChwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX0xOR19MQVQpIHtcbiAgICByZXR1cm4gcHJvamVjdF91TW9kZWxNYXRyaXggKiB2ZWM0KFxuICAgICAgcHJvamVjdF9tZXJjYXRvcl8ocG9zaXRpb24ueHkpICogV09STERfU0NBTEUgKiBwcm9qZWN0X3VTY2FsZSxcbiAgICAgIHByb2plY3Rfc2NhbGUocG9zaXRpb24ueiksXG4gICAgICBwb3NpdGlvbi53XG4gICAgKTtcbiAgfVxuXG4gIGlmIChwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX0xOR0xBVF9PRkZTRVRTKSB7XG4gICAgcmV0dXJuIHByb2plY3Rfb2Zmc2V0Xyhwb3NpdGlvbik7XG4gIH1cblxuICAvLyBNRVRFUl9PRkZTRVRTIG9yIElERU5USVRZXG4gIC8vIEFwcGx5IG1vZGVsIG1hdHJpeFxuICB2ZWM0IHBvc2l0aW9uX21vZGVsc3BhY2UgPSBwcm9qZWN0X3VNb2RlbE1hdHJpeCAqIHBvc2l0aW9uO1xuICByZXR1cm4gcHJvamVjdF9vZmZzZXRfKHBvc2l0aW9uX21vZGVsc3BhY2UpO1xufVxuXG52ZWMzIHByb2plY3RfcG9zaXRpb24odmVjMyBwb3NpdGlvbikge1xuICB2ZWM0IHByb2plY3RlZF9wb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb24odmVjNChwb3NpdGlvbiwgMS4wKSk7XG4gIHJldHVybiBwcm9qZWN0ZWRfcG9zaXRpb24ueHl6O1xufVxuXG52ZWMyIHByb2plY3RfcG9zaXRpb24odmVjMiBwb3NpdGlvbikge1xuICB2ZWM0IHByb2plY3RlZF9wb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb24odmVjNChwb3NpdGlvbiwgMC4wLCAxLjApKTtcbiAgcmV0dXJuIHByb2plY3RlZF9wb3NpdGlvbi54eTtcbn1cblxuLy9cbi8vIFByb2plY3RzIGZyb20gXCJ3b3JsZFwiIGNvb3JkaW5hdGVzIHRvIGNsaXAgc3BhY2UuXG4vLyBVc2VzIHByb2plY3RfdVZpZXdQcm9qZWN0aW9uTWF0cml4XG4vL1xudmVjNCBwcm9qZWN0X3RvX2NsaXBzcGFjZSh2ZWM0IHBvc2l0aW9uKSB7XG4gIGlmIChwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX01FVEVSX09GRlNFVFMgfHxcbiAgICBwcm9qZWN0X3VDb29yZGluYXRlU3lzdGVtID09IENPT1JESU5BVEVfU1lTVEVNX0xOR0xBVF9PRkZTRVRTKSB7XG4gICAgLy8gTmVlZHMgdG8gYmUgZGl2aWRlZCB3aXRoIHByb2plY3RfdVBpeGVsc1Blck1ldGVyXG4gICAgcG9zaXRpb24udyAqPSBwcm9qZWN0X3VQaXhlbHNQZXJNZXRlci56O1xuICB9XG4gIHJldHVybiBwcm9qZWN0X3VWaWV3UHJvamVjdGlvbk1hdHJpeCAqIHBvc2l0aW9uICsgcHJvamVjdF91Q2VudGVyO1xufVxuXG4vLyBSZXR1cm5zIGEgY2xpcCBzcGFjZSBvZmZzZXQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIG51bWJlciBvZiAqKm5vbi1kZXZpY2UqKiBwaXhlbHNcbnZlYzQgcHJvamVjdF9waXhlbF90b19jbGlwc3BhY2UodmVjMiBwaXhlbHMpIHtcbiAgdmVjMiBvZmZzZXQgPSBwaXhlbHMgLyBwcm9qZWN0X3VWaWV3cG9ydFNpemUgKiBwcm9qZWN0X3VEZXZpY2VQaXhlbFJhdGlvO1xuICByZXR1cm4gdmVjNChvZmZzZXQgKiBwcm9qZWN0X3VGb2NhbERpc3RhbmNlLCAwLjAsIDAuMCk7XG59XG5gO1xuIl19