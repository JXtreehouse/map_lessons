// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// TODO export raw gl-matrix

// math.gl classes
export { default as Vector2 } from './vector2';
export { default as Vector3 } from './vector3';
export { default as Vector4 } from './vector4';
export { default as Matrix4 } from './matrix4';
export { default as Quaternion } from './quaternion';

// math.gl "GLSL" functions
export { config, checkNumber, configure, formatValue, isArray, clone, radians, degrees, sin, cos, tan, asin, acos, atan, clamp, equals } from './common';

// Experimental exports
import { default as Euler } from './euler';
import { default as SphericalCoordinates } from './spherical-coordinates';
export var experimental = { Euler: Euler, SphericalCoordinates: SphericalCoordinates };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiVmVjdG9yMiIsIlZlY3RvcjMiLCJWZWN0b3I0IiwiTWF0cml4NCIsIlF1YXRlcm5pb24iLCJjb25maWciLCJjaGVja051bWJlciIsImNvbmZpZ3VyZSIsImZvcm1hdFZhbHVlIiwiaXNBcnJheSIsImNsb25lIiwicmFkaWFucyIsImRlZ3JlZXMiLCJzaW4iLCJjb3MiLCJ0YW4iLCJhc2luIiwiYWNvcyIsImF0YW4iLCJjbGFtcCIsImVxdWFscyIsIkV1bGVyIiwiU3BoZXJpY2FsQ29vcmRpbmF0ZXMiLCJleHBlcmltZW50YWwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUUEsV0FBV0MsT0FBbkIsUUFBaUMsV0FBakM7QUFDQSxTQUFRRCxXQUFXRSxPQUFuQixRQUFpQyxXQUFqQztBQUNBLFNBQVFGLFdBQVdHLE9BQW5CLFFBQWlDLFdBQWpDO0FBQ0EsU0FBUUgsV0FBV0ksT0FBbkIsUUFBaUMsV0FBakM7QUFDQSxTQUFRSixXQUFXSyxVQUFuQixRQUFvQyxjQUFwQzs7QUFFQTtBQUNBLFNBQ0VDLE1BREYsRUFFRUMsV0FGRixFQUdFQyxTQUhGLEVBSUVDLFdBSkYsRUFLRUMsT0FMRixFQU1FQyxLQU5GLEVBT0VDLE9BUEYsRUFRRUMsT0FSRixFQVNFQyxHQVRGLEVBVUVDLEdBVkYsRUFXRUMsR0FYRixFQVlFQyxJQVpGLEVBYUVDLElBYkYsRUFjRUMsSUFkRixFQWVFQyxLQWZGLEVBZ0JFQyxNQWhCRixRQWlCTyxVQWpCUDs7QUFtQkE7QUFDQSxTQUFRckIsV0FBV3NCLEtBQW5CLFFBQStCLFNBQS9CO0FBQ0EsU0FBUXRCLFdBQVd1QixvQkFBbkIsUUFBOEMseUJBQTlDO0FBQ0EsT0FBTyxJQUFNQyxlQUFlLEVBQUNGLFlBQUQsRUFBUUMsMENBQVIsRUFBckIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vLyBUT0RPIGV4cG9ydCByYXcgZ2wtbWF0cml4XG5cbi8vIG1hdGguZ2wgY2xhc3Nlc1xuZXhwb3J0IHtkZWZhdWx0IGFzIFZlY3RvcjJ9IGZyb20gJy4vdmVjdG9yMic7XG5leHBvcnQge2RlZmF1bHQgYXMgVmVjdG9yM30gZnJvbSAnLi92ZWN0b3IzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBWZWN0b3I0fSBmcm9tICcuL3ZlY3RvcjQnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIE1hdHJpeDR9IGZyb20gJy4vbWF0cml4NCc7XG5leHBvcnQge2RlZmF1bHQgYXMgUXVhdGVybmlvbn0gZnJvbSAnLi9xdWF0ZXJuaW9uJztcblxuLy8gbWF0aC5nbCBcIkdMU0xcIiBmdW5jdGlvbnNcbmV4cG9ydCB7XG4gIGNvbmZpZyxcbiAgY2hlY2tOdW1iZXIsXG4gIGNvbmZpZ3VyZSxcbiAgZm9ybWF0VmFsdWUsXG4gIGlzQXJyYXksXG4gIGNsb25lLFxuICByYWRpYW5zLFxuICBkZWdyZWVzLFxuICBzaW4sXG4gIGNvcyxcbiAgdGFuLFxuICBhc2luLFxuICBhY29zLFxuICBhdGFuLFxuICBjbGFtcCxcbiAgZXF1YWxzXG59IGZyb20gJy4vY29tbW9uJztcblxuLy8gRXhwZXJpbWVudGFsIGV4cG9ydHNcbmltcG9ydCB7ZGVmYXVsdCBhcyBFdWxlcn0gZnJvbSAnLi9ldWxlcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgU3BoZXJpY2FsQ29vcmRpbmF0ZXN9IGZyb20gJy4vc3BoZXJpY2FsLWNvb3JkaW5hdGVzJztcbmV4cG9ydCBjb25zdCBleHBlcmltZW50YWwgPSB7RXVsZXIsIFNwaGVyaWNhbENvb3JkaW5hdGVzfTtcbiJdfQ==