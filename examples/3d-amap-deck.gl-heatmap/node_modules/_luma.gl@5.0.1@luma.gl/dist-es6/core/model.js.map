{"version":3,"sources":["../../src/core/model.js"],"names":["GL","Buffer","Program","withParameters","checkUniformValues","isWebGL","getUniformsTable","areUniformsEqual","getDrawMode","Object3D","log","formatValue","MODULAR_SHADERS","assembleShaders","addModel","removeModel","logModel","getOverrides","Query","assert","MSG_INSTANCED_PARAM_DEPRECATED","ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","DEPRECATED_PICKING_UNIFORMS","Model","gl","opts","init","vs","fs","modules","defines","moduleSettings","defaultUniforms","program","shaderCache","isInstanced","instanced","vertexCount","undefined","instanceCount","drawMode","uniforms","attributes","geometry","pickable","pick","render","onBeforeRender","onAfterRender","timerQueryEnabled","_initializeProgram","Object","assign","setUniforms","getModuleUniforms","console","warn","buffers","samplers","userData","drawParams","dynamic","needsRedraw","setGeometry","setAttributes","Boolean","Number","isFinite","isSupported","timer","timeElapsedQuery","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","assembleResult","getProgram","id","getUniforms","delete","redraw","clearRedrawFlags","getNeedsRedraw","getVertexCount","_createBuffersFromAttributeDescriptors","getAttributes","setNeedsRedraw","isEmpty","key","somethingChanged","camera","viewMatrix","modelMatrix","cameraUniforms","viewUniforms","getCoordinateUniforms","parameters","settings","framebuffer","deprecated","updateModuleSettings","priority","message","resolvedUniforms","addViewUniforms","group","collapsed","setProgramState","_logAttributesAndUniforms","isIndexed","indexType","_timerQueryStart","draw","_timerQueryEnd","unsetProgramState","groupEnd","use","setBuffers","unsetBuffers","forEach","uniform","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","attribute","isGeneric","value","target","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","buffer","setData","data","setDataLayout","attributeTable","_getAttributesTable","header","table","unusedTable","unusedCount","undefinedOnly","count","attributeLocations","_attributeLocations","location","_getAttributeEntry","round","Math","num","type","size","verts","bytes","layout","length","BYTES_PER_ELEMENT","constructor","name","String","replace","isInteger","indexOf"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n// A scenegraph object node\nimport {GL, Buffer, Program, withParameters, checkUniformValues, isWebGL} from '../webgl';\n// import {withParameters} from '../webgl/context-state';\nimport {getUniformsTable, areUniformsEqual} from '../webgl/uniforms';\nimport {getDrawMode} from '../geometry/geometry';\n\nimport Object3D from '../core/object-3d';\nimport {log, formatValue} from '../utils';\nimport {MODULAR_SHADERS} from '../shadertools/shaders';\nimport {assembleShaders} from '../shadertools';\n\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport Query from '../webgl/query';\nimport assert from 'assert';\n\nconst MSG_INSTANCED_PARAM_DEPRECATED = `\\\nWarning: Model constructor: parameter \"instanced\" renamed to \"isInstanced\".\nThis will become a hard error in a future version of luma.gl.`;\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst LOG_DRAW_PRIORITY = 2;\n\n// These old picking uniforms should be avoided and we should use picking module\n// and set uniforms using Model class 'updateModuleSettings()'\nconst DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled'];\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, opts = {}) {\n    super(opts);\n    assert(isWebGL(gl));\n    this.gl = gl;\n    this.init(opts);\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  init({\n    vs = null,\n    fs = null,\n\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    moduleSettings = {},\n\n    // 2: Legacy shaders\n    defaultUniforms,\n\n    // 3: Pre-created program\n    program = null,\n\n    shaderCache = null,\n\n    isInstanced = false, // Enables instanced rendering\n    instanced, // deprecated\n    vertexCount = undefined,\n    instanceCount = 0,\n\n    // Extra uniforms and attributes (beyond geometry, material, camera)\n    drawMode,\n    uniforms = {},\n    attributes = {},\n    geometry = null,\n\n    // Picking\n    pickable = true,\n    pick = null,\n    render = null,\n    onBeforeRender = () => {},\n    onAfterRender = () => {},\n\n    // Other opts\n    timerQueryEnabled = false\n  } = {}) {\n    this._initializeProgram({\n      vs,\n      fs,\n      modules,\n      defines,\n      moduleSettings,\n      defaultUniforms,\n      program,\n      shaderCache\n    });\n\n    this.uniforms = {};\n\n    // Make sure we have some reasonable default uniforms in place\n    uniforms = Object.assign({}, this.program.defaultUniforms, uniforms);\n    this.setUniforms(uniforms);\n    // Get all default uniforms\n    this.setUniforms(this.getModuleUniforms());\n    // Get unforms for supplied parameters\n    this.setUniforms(this.getModuleUniforms(moduleSettings));\n\n    if (instanced) {\n      /* global console */\n      /* eslint-disable no-console */\n      console.warn(MSG_INSTANCED_PARAM_DEPRECATED);\n      isInstanced = isInstanced || instanced;\n    }\n\n    // TODO - remove?\n    this.buffers = {};\n    this.samplers = {};\n    this.userData = {};\n    this.drawParams = {};\n    this.dynamic = false;\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    this.setGeometry(geometry);\n\n    this.attributes = {};\n    this.setAttributes(attributes);\n\n    // geometry might have set drawMode and vertexCount\n    if (drawMode !== undefined) {\n      this.drawMode = getDrawMode(drawMode);\n    }\n    if (vertexCount !== undefined) {\n      this.vertexCount = vertexCount;\n    }\n    this.isInstanced = isInstanced;\n    this.instanceCount = instanceCount;\n\n    // picking options\n    this.pickable = Boolean(pickable);\n    this.pick = pick || (() => false);\n\n    this.onBeforeRender = onBeforeRender;\n    this.onAfterRender = onAfterRender;\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n    this.timerQueryEnabled = timerQueryEnabled && Query.isSupported(this.gl, {timer: true});\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _initializeProgram({\n    vs,\n    fs,\n    modules,\n    defines,\n    moduleSettings,\n    defaultUniforms,\n    program,\n    shaderCache\n  }) {\n\n    this.getModuleUniforms = x => {};\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      if (!vs) {\n        vs = MODULAR_SHADERS.vs;\n      }\n      if (!fs) {\n        fs = MODULAR_SHADERS.fs;\n      }\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, defines});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {vs, fs, id: this.id});\n      } else {\n        program = new Program(this.gl, {vs, fs});\n      }\n\n      const {getUniforms} = assembleResult;\n      this.getModuleUniforms = getUniforms || (x => {});\n    }\n\n    this.program = program;\n    assert(this.program instanceof Program, 'Model needs a program');\n  }\n  /* eslint-enable complexity */\n\n  destroy() {\n    this.delete();\n  }\n\n  delete() {\n    this.program.delete();\n    removeModel(this.id);\n  }\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    return redraw;\n  }\n\n  setDrawMode(drawMode) {\n    this.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    this.vertexCount = geometry.getVertexCount();\n    this.drawMode = geometry.drawMode;\n    this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  setAttributes(attributes = {}) {\n    let isEmpty = true;\n    /* eslint-disable no-unused-vars */\n    for (const key in attributes) {\n      isEmpty = false;\n      break;\n    }\n    /* eslint-enable no-unused-vars */\n\n    if (!isEmpty) {\n      Object.assign(this.attributes, attributes);\n      this._createBuffersFromAttributeDescriptors(attributes);\n      this.setNeedsRedraw();\n    }\n    return this;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // TODO: we are still setting these uniforms in deck.gl so we don't break any external\n    // application, these are marked deprecated in 5.0, remove them in deck.gl in 6.0.\n    // Disabling since it gets too noisy in console, these are documented as deprecated.\n    // this._checkForDeprecatedUniforms(uniforms);\n    let somethingChanged = false;\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        break;\n      }\n    }\n\n    if (somethingChanged) {\n      checkUniformValues(uniforms, this.id);\n      Object.assign(this.uniforms, uniforms);\n      this.setNeedsRedraw();\n    }\n    return this;\n  }\n\n  // getModuleUniforms (already on object)\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts);\n    return this.setUniforms(uniforms);\n  }\n\n  // TODO - uniform names are too strongly linked camera <=> default shaders\n  // At least all special handling is collected here.\n  addViewUniforms(uniforms) {\n    // TODO - special treatment of these parameters should be removed\n    const {camera, viewMatrix, modelMatrix} = uniforms;\n    // Camera exposes uniforms that can be used directly in shaders\n    const cameraUniforms = camera ? camera.getUniforms() : {};\n\n    const viewUniforms = viewMatrix ?\n      this.getCoordinateUniforms(viewMatrix, modelMatrix) : {};\n\n    return Object.assign({}, uniforms, cameraUniforms, viewUniforms);\n  }\n\n  draw({\n    moduleSettings = null,\n    uniforms = {},\n    attributes = {},\n    samplers = {},\n    parameters = {},\n    settings,\n    framebuffer = null\n  } = {}) {\n    if (settings) {\n      log.deprecated('settings', 'parameters');\n      parameters = settings;\n    }\n\n    if (moduleSettings) {\n      this.updateModuleSettings(moduleSettings);\n    }\n\n    const {program: {gl}} = this;\n    if (framebuffer) {\n      parameters = Object.assign(parameters, {framebuffer});\n    }\n    withParameters(gl, parameters,\n      () => this.render(uniforms, attributes, samplers)\n    );\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    return this;\n  }\n\n  render(uniforms = {}, attributes = {}, samplers = {}) {\n    addModel(this);\n\n    const resolvedUniforms = this.addViewUniforms(uniforms);\n    getOverrides(this.id, resolvedUniforms);\n\n    this.setUniforms(resolvedUniforms);\n    this.setAttributes(attributes);\n    Object.assign(this.samplers, samplers);\n\n    log.group(LOG_DRAW_PRIORITY,\n      `>>> RENDERING MODEL ${this.id}`, {collapsed: log.priority <= 2});\n\n    this.setProgramState();\n\n    this._logAttributesAndUniforms(2, resolvedUniforms);\n\n    this.onBeforeRender();\n\n    const drawParams = this.drawParams;\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model');\n    }\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this._timerQueryStart();\n\n    this.program.draw({\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    });\n\n    this._timerQueryEnd();\n\n    this.onAfterRender();\n\n    this.unsetProgramState();\n\n    this.setNeedsRedraw(false);\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> RENDERING MODEL ${this.id}`);\n\n    return this;\n  }\n\n  setProgramState() {\n    const {program} = this;\n    program.use();\n    this.drawParams = {};\n    program.setBuffers(this.buffers, {drawParams: this.drawParams});\n    program.setUniforms(this.uniforms, this.samplers);\n    return this;\n  }\n\n  unsetProgramState() {\n    // Ensures all vertex attributes are disabled and ELEMENT_ARRAY_BUFFER\n    // is unbound\n    this.program.unsetBuffers();\n    return this;\n  }\n\n  // HELPER METHODS\n\n  _checkForDeprecatedUniforms(uniforms) {\n    // deprecated picking uniforms\n    DEPRECATED_PICKING_UNIFORMS.forEach((uniform) => {\n      if (uniform in uniforms) {\n        log.deprecated(uniform, 'use picking shader module and Model class updateModuleSettings()');\n      }\n    });\n  }\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(LOG_DRAW_PRIORITY, `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        );\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute instanceof Buffer) {\n        this.buffers[attributeName] = attribute;\n      } else if (attribute.isGeneric) {\n        this.buffers[attributeName] = attribute.value;\n      } else {\n        // Autocreate a buffer\n        this.buffers[attributeName] =\n          this.buffers[attributeName] || new Buffer(gl, {\n            target: attribute.isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER\n          });\n\n        const buffer = this.buffers[attributeName];\n        buffer\n          .setData({data: attribute.value})\n          .setDataLayout(attribute);\n      }\n    }\n\n    return this;\n  }\n\n  _logAttributesAndUniforms(priority, uniforms = {}) {\n    if (log.priority >= priority) {\n      const attributeTable = this._getAttributesTable({\n        header: `${this.id} attributes`,\n        program: this.program,\n        attributes: Object.assign({}, this.geometry.attributes, this.attributes)\n      });\n      log.table(priority, attributeTable);\n\n      const {table, unusedTable, unusedCount} = getUniformsTable({\n        header: `${this.id} uniforms`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms)\n      });\n\n      log.table(priority, table);\n      log.log(priority, `${unusedCount || 'No'} unused uniforms `, unusedTable);\n    } else {\n      // Always log missing uniforms\n      const {table, count} = getUniformsTable({\n        header: `${this.id} uniforms`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms),\n        undefinedOnly: true\n      });\n      if (count > 0) {\n        log.table(priority, table);\n      }\n    }\n\n    logModel(this, uniforms);\n  }\n\n  // Todo move to attributes manager\n  _getAttributesTable({\n    attributes,\n    header = 'Attributes',\n    instanced,\n    program\n  } = {}) {\n    assert(program);\n    const attributeLocations = program._attributeLocations;\n    const table = {}; // {[header]: {}};\n\n    // Add used attributes\n    for (const attributeName in attributeLocations) {\n      const attribute = attributes[attributeName];\n      const location = attributeLocations[attributeName];\n      table[attributeName] = this._getAttributeEntry(attribute, location, header);\n    }\n\n    // Add any unused attributes\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (!table[attributeName]) {\n        table[attributeName] = this._getAttributeEntry(attribute, null, header);\n      }\n    }\n\n    return table;\n  }\n\n  _getAttributeEntry(attribute, location, header) {\n    const round = num => Math.round(num * 10) / 10;\n\n    let type = 'NOT PROVIDED';\n    let instanced = 0;\n    let size = 'N/A';\n    let verts = 'N/A';\n    let bytes = 'N/A';\n    let value = 'N/A';\n\n    if (attribute && location === null) {\n      location = attribute.isIndexed ? 'ELEMENT_ARRAY_BUFFER' : 'NOT USED';\n    }\n\n    if (attribute instanceof Buffer) {\n      const buffer = attribute;\n      type = buffer.layout.type;\n      instanced = buffer.layout.instanced;\n      size = buffer.layout.size;\n      verts = round(buffer.data.length / buffer.layout.size);\n      bytes = buffer.data.length * buffer.data.BYTES_PER_ELEMENT;\n    } else if (attribute) {\n      type = attribute.value.constructor.name;\n      instanced = attribute.instanced;\n      size = attribute.size;\n      verts = round(attribute.value.length / attribute.size);\n      bytes = attribute.value.length * attribute.value.BYTES_PER_ELEMENT;\n      value = attribute.value;\n    }\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    const isInteger = type.indexOf('nt') !== -1;\n\n    return {\n      'Inst/Verts/Comps/Bytes/Type/Loc':\n        `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} ${type}) loc=${location}`,\n      [header]: formatValue(value, {size, isInteger})\n    };\n  }\n\n  // DEPRECATED / REMOVED\n  isPickable() {\n    return this.pickable;\n  }\n\n  setPickable(pickable = true) {\n    this.pickable = Boolean(pickable);\n    return this;\n  }\n\n  getGeometry() {\n    return this.geometry;\n  }\n}\n"]}