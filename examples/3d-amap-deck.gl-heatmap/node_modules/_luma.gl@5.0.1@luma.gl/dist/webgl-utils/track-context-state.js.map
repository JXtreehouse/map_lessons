{"version":3,"sources":["../../src/webgl-utils/track-context-state.js"],"names":["trackContextState","pushContextState","popContextState","clone","Array","isArray","x","ArrayBuffer","isView","slice","deepEqual","y","isArrayX","isArrayY","length","i","GL_STATE_SETTERS","enable","update","cap","disable","pixelStorei","pname","param","hint","bindFramebuffer","target","fb","FRAMEBUFFER","DRAW_FRAMEBUFFER_BINDING","READ_FRAMEBUFFER_BINDING","DRAW_FRAMEBUFFER","READ_FRAMEBUFFER","blendColor","r","g","b","a","BLEND_COLOR","Float32Array","blendEquation","mode","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","blendEquationSeparate","modeRGB","modeAlpha","blendFunc","src","dst","BLEND_SRC_RGB","BLEND_DST_RGB","BLEND_SRC_ALPHA","BLEND_DST_ALPHA","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","clearColor","COLOR_CLEAR_VALUE","clearDepth","depth","DEPTH_CLEAR_VALUE","clearStencil","s","STENCIL_CLEAR_VALUE","colorMask","COLOR_WRITEMASK","cullFace","CULL_FACE_MODE","depthFunc","func","DEPTH_FUNC","depthRange","zNear","zFar","DEPTH_RANGE","depthMask","mask","DEPTH_WRITEMASK","frontFace","face","FRONT_FACE","lineWidth","width","LINE_WIDTH","polygonOffset","factor","units","POLYGON_OFFSET_FACTOR","POLYGON_OFFSET_UNITS","sampleCoverage","value","invert","SAMPLE_COVERAGE_VALUE","SAMPLE_COVERAGE_INVERT","scissor","height","SCISSOR_BOX","Int32Array","stencilMask","STENCIL_WRITEMASK","STENCIL_BACK_WRITEMASK","stencilMaskSeparate","FRONT","stencilFunc","ref","STENCIL_FUNC","STENCIL_REF","STENCIL_VALUE_MASK","STENCIL_BACK_FUNC","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","stencilFuncSeparate","stencilOp","fail","zfail","zpass","STENCIL_FAIL","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_BACK_FAIL","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","stencilOpSeparate","viewport","VIEWPORT","installGetterOverride","gl","functionName","originalGetterFunc","bind","state","cache","Object","defineProperty","configurable","installSetterSpy","setter","originalSetterFunc","params","_updateCache","valueChanged","oldValue","log","GLState","copyState","stateStack","assign","seal","values","push","oldValues","pop","key","undefined"],"mappings":"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","file":"track-context-state.js","sourcesContent":["// Support for listening to context state changes and intercepting state queries\n//\n// NOTE: this system does not handle buffer bindings\nimport GL from './constants';\nimport {setParameters, getParameters, GL_PARAMETER_DEFAULTS} from './set-parameters';\nimport polyfillContext from './polyfill-context';\nimport assert from 'assert';\n\nexport const clone = x => {\n  return Array.isArray(x) || ArrayBuffer.isView(x) ? x.slice() : x;\n};\n\nexport const deepEqual = (x, y) => {\n  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return x === y;\n};\n\n// interceptors for WEBGL FUNCTIONS that set WebGLRenderingContext state\n// These \"setters\" map functions to gl parameters\n\nexport const GL_STATE_SETTERS = {\n\n  // GENERIC SETTERS\n\n  enable: (update, cap) => update({\n    [cap]: true\n  }),\n  disable: (update, cap) => update({\n    [cap]: false}\n  ),\n  pixelStorei: (update, pname, param) => update({\n    [pname]: param\n  }),\n  hint: (update, pname, hint) => update({\n    [pname]: hint\n  }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, fb) => {\n    switch (target) {\n    case GL.FRAMEBUFFER:\n      return update({\n        [GL.DRAW_FRAMEBUFFER_BINDING]: fb,\n        [GL.READ_FRAMEBUFFER_BINDING]: fb\n      });\n    case GL.DRAW_FRAMEBUFFER:\n      return update({[GL.DRAW_FRAMEBUFFER_BINDING]: fb});\n    case GL.READ_FRAMEBUFFER:\n      return update({[GL.READ_FRAMEBUFFER_BINDING]: fb});\n    default:\n      return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) => update({\n    [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])}\n  ),\n\n  blendEquation: (update, mode) => update({\n    [GL.BLEND_EQUATION_RGB]: mode,\n    [GL.BLEND_EQUATION_ALPHA]: mode\n  }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) => update({\n    [GL.BLEND_EQUATION_RGB]: modeRGB,\n    [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n  }),\n\n  blendFunc: (update, src, dst) => update({\n    [GL.BLEND_SRC_RGB]: src,\n    [GL.BLEND_DST_RGB]: dst,\n    [GL.BLEND_SRC_ALPHA]: src,\n    [GL.BLEND_DST_ALPHA]: dst\n  }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({\n    [GL.BLEND_SRC_RGB]: srcRGB,\n    [GL.BLEND_DST_RGB]: dstRGB,\n    [GL.BLEND_SRC_ALPHA]: srcAlpha,\n    [GL.BLEND_DST_ALPHA]: dstAlpha\n  }),\n\n  clearColor: (update, r, g, b, a) => update({\n    [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n  }),\n\n  clearDepth: (update, depth) => update({\n    [GL.DEPTH_CLEAR_VALUE]: depth\n  }),\n\n  clearStencil: (update, s) => update({\n    [GL.STENCIL_CLEAR_VALUE]: s\n  }),\n\n  colorMask: (update, r, g, b, a) => update({\n    [GL.COLOR_WRITEMASK]: [r, g, b, a]\n  }),\n\n  cullFace: (update, mode) => update({\n    [GL.CULL_FACE_MODE]: mode\n  }),\n\n  depthFunc: (update, func) => update({\n    [GL.DEPTH_FUNC]: func\n  }),\n\n  depthRange: (update, zNear, zFar) => update({\n    [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n  }),\n\n  depthMask: (update, mask) => update({\n    [GL.DEPTH_WRITEMASK]: mask\n  }),\n\n  frontFace: (update, face) => update({\n    [GL.FRONT_FACE]: face\n  }),\n\n  lineWidth: (update, width) => update({\n    [GL.LINE_WIDTH]: width\n  }),\n\n  polygonOffset: (update, factor, units) => update({\n    [GL.POLYGON_OFFSET_FACTOR]: factor,\n    [GL.POLYGON_OFFSET_UNITS]: units\n  }),\n\n  sampleCoverage: (update, value, invert) => update({\n    [GL.SAMPLE_COVERAGE_VALUE]: value,\n    [GL.SAMPLE_COVERAGE_INVERT]: invert\n  }),\n\n  scissor: (update, x, y, width, height) => update({\n    [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n  }),\n\n  stencilMask: (update, mask) => update({\n    [GL.STENCIL_WRITEMASK]: mask,\n    [GL.STENCIL_BACK_WRITEMASK]: mask\n  }),\n\n  stencilMaskSeparate: (update, face, mask) => update({\n    [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n  }),\n\n  stencilFunc: (update, func, ref, mask) => update({\n    [GL.STENCIL_FUNC]: func,\n    [GL.STENCIL_REF]: ref,\n    [GL.STENCIL_VALUE_MASK]: mask,\n    [GL.STENCIL_BACK_FUNC]: func,\n    [GL.STENCIL_BACK_REF]: ref,\n    [GL.STENCIL_BACK_VALUE_MASK]: mask\n  }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) => update({\n    [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n    [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n    [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n  }),\n\n  stencilOp: (update, fail, zfail, zpass) => update({\n    [GL.STENCIL_FAIL]: fail,\n    [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n    [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n    [GL.STENCIL_BACK_FAIL]: fail,\n    [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n    [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n  }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) => update({\n    [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n    [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n    [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n  }),\n\n  viewport: (update, x, y, width, height) => update({\n    [GL.VIEWPORT]: new Int32Array([x, y, width, height])\n  })\n};\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, we must\n    // query first time. They are all primitive (single value)\n    if (!(pname in gl.state.cache)) {\n      gl.state.cache[pname] = originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable ?\n      // Call the getter the params so that it can e.g. serve from a cache\n      gl.state.cache[pname] :\n      // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n      originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(\n    gl[functionName], 'name', {value: `${functionName}-from-cache`, configurable: false});\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      gl.state.log(`gl.${functionName}`, ...params); // eslint-disable-line\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(\n    gl[functionName], 'name', {value: `${functionName}-to-cache`, configurable: false});\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(gl, {\n    copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n    log = () => {} // Logging function, called when gl parameter change calls are actually issued\n  } = {}) {\n    this.gl = gl;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues, this.cache);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      // Check that value hasn't already been shadowed\n      if (!deepEqual(values[key], this.cache[key])) {\n        valueChanged = true;\n        oldValue = this.cache[key];\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = this.cache[key];\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = values[key];\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n * @param {WebGLRenderingContext} - context\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport default function trackContextState(gl, {enable = true, copyState} = {}) {\n  assert(copyState !== undefined);\n  if (!gl.state) {\n    polyfillContext(gl);\n\n    // Create a state cache\n    gl.state = new GLState(gl, {copyState, enable});\n\n    // intercept all setter functions in the table\n    for (const key in GL_STATE_SETTERS) {\n      const setter = GL_STATE_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n\n  return gl;\n}\n\nexport function pushContextState(gl) {\n  assert(gl.state);\n  gl.state.push();\n}\n\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n"]}