{"version":3,"sources":["../../src/webgl/context.js"],"names":["isWebGL","isWebGL2","assertWebGLContext","assertWebGL2Context","setContextDefaults","createGLContext","deleteGLContext","pollContext","GL_ARRAY_BUFFER","GL_TEXTURE_BINDING_3D","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","ERR_WEBGL_MISSING_NODE","ERR_HEADLESSGL_NOT_AVAILABLE","ERR_HEADLESSGL_FAILED","gl","Boolean","ARRAY_BUFFER","TEXTURE_BINDING_3D","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","opts","Object","assign","throwOnError","onError","message","Error","realCanvas","id","_createHeadlessContext","copyState","log","args","priority","Math","max","logInfo","poll","webGL","info","driver","vendor","renderer","once","globals","headlessGL"],"mappings":"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","file":"context.js","sourcesContent":["// WebGLRenderingContext related methods\nimport {WebGLRenderingContext, WebGL2RenderingContext, webGLTypesAvailable} from './api';\nimport trackContextState from '../webgl-utils/track-context-state';\nimport {createCanvas, getCanvas, createContext} from '../webgl-utils';\n\nimport {makeDebugContext} from './context-debug';\nimport {glGetDebugInfo} from './context-limits';\nimport queryManager from './helpers/query-manager';\n\nimport {log, isBrowser} from '../utils';\nimport luma from '../init';\nimport assert from 'assert';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\nconst GL_ARRAY_BUFFER = 0x8892;\nconst GL_TEXTURE_BINDING_3D = 0x806A;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nconst ERR_WEBGL_MISSING_NODE = `\\\nWebGL API is missing. To run luma.gl under Node.js, please \"npm install gl\"\nand import 'luma.gl/headless' before importing 'luma.gl'.`;\n\nconst ERR_HEADLESSGL_NOT_AVAILABLE =\n'Cannot create headless WebGL context, headlessGL not available';\n\nconst ERR_HEADLESSGL_FAILED = 'headlessGL failed to create headless WebGL context';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGLRenderingContext ||\n    gl.ARRAY_BUFFER === GL_ARRAY_BUFFER\n  ));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && (\n    gl instanceof WebGL2RenderingContext ||\n    gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D\n  ));\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true,  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setContextDefaults(opts = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, opts);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(opts = {}) {\n  opts = Object.assign({}, contextDefaults, opts);\n  const {canvas, width, height, throwOnError, manageState, debug} = opts;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (throwOnError) {\n      throw new Error(message);\n    }\n    // log.log(0, message);\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Make sure we have a real canvas (\"canvas\" can a string, a canvas or null)\n    let realCanvas;\n    if (!canvas) {\n      realCanvas = createCanvas({id: 'lumagl-canvas', width, height, onError});\n    } else if (typeof canvas === 'string') {\n      realCanvas = getCanvas({id: canvas});\n    } else {\n      realCanvas = canvas;\n    }\n    // Create a WebGL context in the canvas\n    gl = createContext({canvas: realCanvas, opts});\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = _createHeadlessContext({width, height, opts, onError});\n  }\n  if (!gl) {\n    return null;\n  }\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    gl = makeDebugContext(gl, {debug});\n    // Debug forces log level to at least 1\n    log.priority = Math.max(log.priority, 1);\n    // Log some debug info about the context\n  }\n  logInfo(gl);\n\n  // Add to seer integration\n\n  return gl;\n}\n\nexport function deleteGLContext(gl) {\n  // Remove from seer integration\n}\n\n// POLLING FOR PENDING QUERIES\n// Calling this function checks all pending queries for completion\nexport function pollContext(gl) {\n  queryManager.poll(gl);\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = glGetDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(0, `${webGL}${debug} context ${driver}`);\n}\n\n// Create headless gl context (for running under Node.js)\nfunction _createHeadlessContext({width, height, opts, onError}) {\n  const {webgl1, webgl2} = opts;\n  if (webgl2 && !webgl1) {\n    return onError('headless-gl does not support WebGL2');\n  }\n  if (!webGLTypesAvailable) {\n    return onError(ERR_WEBGL_MISSING_NODE);\n  }\n  if (!luma.globals.headlessGL) {\n    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);\n  }\n  const gl = luma.globals.headlessGL(width, height, opts);\n  if (!gl) {\n    return onError(ERR_HEADLESSGL_FAILED);\n  }\n  return gl;\n}\n"]}