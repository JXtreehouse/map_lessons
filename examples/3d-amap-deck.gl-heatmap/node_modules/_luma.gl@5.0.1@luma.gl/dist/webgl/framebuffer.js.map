{"version":3,"sources":["../../src/webgl/framebuffer.js"],"names":["GL_FRAMEBUFFER","GL_DRAW_FRAMEBUFFER","GL_READ_FRAMEBUFFER","GL_COLOR_ATTACHMENT0","GL_DEPTH_ATTACHMENT","GL_STENCIL_ATTACHMENT","GL_RENDERBUFFER","GL_TEXTURE_3D","GL_TEXTURE_2D_ARRAY","GL_TEXTURE_2D","GL_TEXTURE_CUBE_MAP","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","luma","defaultFramebuffer","handle","attachments","opts","width","height","readBuffer","drawBuffers","initialize","Object","seal","color","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","log","id","attachmentPoint","newAttachments","keys","forEach","key","assign","descriptor","_unattach","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Error","_getFrameBufferStatus","value","drawBuffer","x","y","format","RGBA","type","pixelArray","COLOR_ATTACHMENT0","FRONT","UNSIGNED_BYTE","ArrayType","clamped","components","glFormatToComponents","readPixels","maxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","image","dataUrl","readDataUrl","Image","src","xoffset","yoffset","zoffset","mipmapLevel","prevBuffer","isFinite","copyTexSubImage2D","copyTexSubImage3D","srcFramebuffer","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","mask","NEAREST","prevDrawHandle","prevReadHandle","prevReadBuffer","blitFramebuffer","invalidateAll","invalidateFramebuffer","pname","_getAttachmentParameterFallback","bindTexture","getFramebufferAttachmentParameter","parameters","constructor","ATTACHMENT_PARAMETERS","values","getAttachmentParameter","window","open","copyToDataUrl","priority","message","defaultAttachments","pixels","mipmaps","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DEPTH_COMPONENT16","bindRenderbuffer","framebufferRenderbuffer","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D","BACK","ext","drawBuffersWEBGL","length","caps","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","webgl2","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","UNSIGNED_INT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","EXT_sRGB","LINEAR","createFramebuffer","deleteFramebuffer","ALPHA","RGB","STATUS"],"mappings":"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","file":"framebuffer.js","sourcesContent":["import GL from './api';\nimport {isWebGL2, ERR_WEBGL2} from './context';\nimport {getFeatures} from './context-features';\nimport {clear, clearBuffer} from './clear';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../utils/typed-array-utils';\nimport {log, flipRows, scalePixels} from '../utils';\nimport assert from 'assert';\n\n// Local constants - will collapse during minification\nconst GL_FRAMEBUFFER = 0x8D40;\nconst GL_DRAW_FRAMEBUFFER = 0x8CA8;\nconst GL_READ_FRAMEBUFFER = 0x8CA9;\n\nconst GL_COLOR_ATTACHMENT0 = 0x8CE0;\nconst GL_DEPTH_ATTACHMENT = 0x8D00;\nconst GL_STENCIL_ATTACHMENT = 0x8D20;\n// const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\nconst GL_RENDERBUFFER = 0x8D41;\n\nconst GL_TEXTURE_3D = 0x806F;\nconst GL_TEXTURE_2D_ARRAY = 0x8C1A;\nconst GL_TEXTURE_2D = 0x0DE1;\nconst GL_TEXTURE_CUBE_MAP = 0x8513;\n\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\n\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n\n  static isSupported(gl, {\n    colorBufferFloat,    // Whether floating point textures can be rendered and read\n    colorBufferHalfFloat // Whether half float textures can be rendered and read\n  } = {}) {\n    let supported = true;\n    supported = colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL_color_buffer_float');\n    supported = colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultFramebuffer) {\n      gl.luma.defaultFramebuffer = new Framebuffer(gl, {handle: null, attachments: {}});\n    }\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL_COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL_COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL_COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL_COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return this.attachments[GL_DEPTH_ATTACHMENT] || null;\n  }\n\n  get stencil() {\n    return this.attachments[GL_STENCIL_ATTACHMENT] || null;\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments({color, depth, stencil, width, height});\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false\n  }) {\n    this.attach(attachments, {clearAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`);\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {\n    clearAttachments = false\n  } = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const attachment in newAttachments) {\n      // Ensure key is not undefined\n      assert(attachment !== 'undefined', 'Misspelled framebuffer binding point?');\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach({attachment});\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);\n    gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({\n    color,\n    depth,\n    stencil,\n    drawBuffers = []\n  } = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // Auto deduced from pixelArray or gl.UNSIGNED_BYTE\n    pixelArray = null,\n    attachment = GL_COLOR_ATTACHMENT0 // TODO - support gl.readBuffer\n  }) {\n    const {gl} = this;\n\n    // TODO - Set and unset gl.readBuffer\n    if (attachment === GL.COLOR_ATTACHMENT0 && this.handle === null) {\n      attachment = GL.FRONT;\n    }\n\n    // Deduce type and allocated pixelArray if needed\n    if (!pixelArray) {\n      // Allocate pixel array if not already available, using supplied type\n      type = type || gl.UNSIGNED_BYTE;\n      const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n      const components = glFormatToComponents(format);\n      // TODO - check for composite type (components = 1).\n      pixelArray = pixelArray || new ArrayType(width * height * components);\n    }\n\n    // Pixel array available, if necessary, deduce type from it.\n    type = type || getGLTypeFromTypedArray(pixelArray);\n\n    const prevHandle = this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle);\n\n    return pixelArray;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl({\n    attachment = GL_COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    let data = this.readPixels({attachment});\n\n    // Scale down\n    let {width, height} = this;\n    while (height > maxHeight) {\n      ({data, width, height} = scalePixels({data, width, height}));\n    }\n\n    // Flip to top down coordinate system\n    flipRows({data, width, height});\n\n    /* global document */\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n\n    // Copy the pixels to a 2D canvas\n    const imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    context.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage({\n    image = null,\n    attachment = GL_COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    /* global Image */\n    const dataUrl = this.readDataUrl({attachment});\n    image = image || new Image();\n    image.src = dataUrl;\n    return image;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  copyToTexture({\n    // Target\n    texture,\n    target, // for cubemaps\n    xoffset = 0,\n    yoffset = 0,\n    zoffset = 0,\n    mipmapLevel = 0,\n\n    // Source\n    attachment = GL_COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    x = 0,\n    y = 0,\n    width, // defaults to texture width\n    height // defaults to texture height\n  }) {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    const prevBuffer = gl.readBuffer(attachment);\n\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n\n    // target\n    switch (texture.target) {\n    case GL_TEXTURE_2D:\n    case GL_TEXTURE_CUBE_MAP:\n      gl.copyTexSubImage2D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    case GL_TEXTURE_2D_ARRAY:\n    case GL_TEXTURE_3D:\n      gl.copyTexSubImage3D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        zoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    default:\n    }\n\n    gl.readBuffer(prevBuffer);\n    gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle);\n    return texture;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  blit({\n    srcFramebuffer,\n    attachment = GL_COLOR_ATTACHMENT0,\n    srcX0 = 0, srcY0 = 0, srcX1, srcY1,\n    dstX0 = 0, dstY0 = 0, dstX1, dstY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  }) {\n    const {gl} = this;\n    assert(isWebGL2(gl), ERR_WEBGL2);\n\n    if (!srcFramebuffer.handle && attachment === GL_COLOR_ATTACHMENT0) {\n      attachment = GL.FRONT;\n    }\n\n    if (color) {\n      mask |= GL_COLOR_BUFFER_BIT;\n    }\n    if (depth) {\n      mask |= GL_DEPTH_BUFFER_BIT;\n    }\n    if (stencil) {\n      mask |= GL_STENCIL_BUFFER_BIT;\n    }\n    assert(mask);\n\n    srcX1 = srcX1 === undefined ? srcFramebuffer.width : srcX1;\n    srcY1 = srcY1 === undefined ? srcFramebuffer.height : srcY1;\n    dstX1 = dstX1 === undefined ? this.width : dstX1;\n    dstY1 = dstY1 === undefined ? this.height : dstY1;\n\n    const prevDrawHandle = gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, this.handle);\n    const prevReadHandle = gl.bindFramebuffer(GL_READ_FRAMEBUFFER, srcFramebuffer.handle);\n    const prevReadBuffer = gl.readBuffer(attachment);\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    gl.readBuffer(prevReadBuffer);\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, prevReadHandle);\n    gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, prevDrawHandle);\n\n    return this;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region\n  // of the framebuffer\n  invalidate({\n    attachments = [],\n    x = 0,\n    y = 0,\n    width,\n    height\n  }) {\n    const {gl} = this;\n    assert(isWebGL2(gl, ERR_WEBGL2));\n    const prevHandle = gl.bindFramebuffer(GL_READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter({\n    attachment = GL_COLOR_ATTACHMENT0,\n    pname\n  } = {}) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindTexture(GL_FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL_FRAMEBUFFER, attachment, pname);\n      this.gl.bindTexture(GL_FRAMEBUFFER, null);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL_COLOR_ATTACHMENT0,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || {}\n  ) {\n    const values = {};\n    for (const pname in parameters) {\n      values[pname] = this.getAttachmentParameter(pname);\n    }\n    return this;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(this.copyToDataUrl(), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log({priority = 0, message = ''} = {}) {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = this.copyToDataUrl({maxHeight: 100});\n    log.image({priority, message, image}, message);\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL_FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL_FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments({color, depth, stencil, width, height}) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL_COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    // Add a depth buffer if requested and not supplied\n    if (depth) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL_DEPTH_ATTACHMENT] =\n        new Renderbuffer(this.gl, {format: GL.DEPTH_COMPONENT16, width, height});\n    }\n\n    // TODO - handle stencil and combined depth and stencil\n\n    return defaultAttachments;\n  }\n\n  _unattach({attachment}) {\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n    this.gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, null);\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL_COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL_COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n    case GL_TEXTURE_2D_ARRAY:\n    case GL_TEXTURE_3D:\n      gl.framebufferTextureLayer(GL_FRAMEBUFFER, attachment, texture.target, level, layer);\n      break;\n\n    case GL_TEXTURE_CUBE_MAP:\n      // layer must be a cubemap face (or if index, converted to cube map face)\n      const face = mapIndexToCubeMapFace(layer);\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, face, texture.handle, level);\n      break;\n\n    case GL_TEXTURE_2D:\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, GL_TEXTURE_2D, texture.handle, level);\n      break;\n\n    default:\n      assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(readBuffer === GL_COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(drawBuffers.length === 1 &&\n          (drawBuffers[0] === GL_COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n    case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n      return !caps.webgl2 ? 0 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n      return !caps.webgl2 ? 8 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n      return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n      return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n    default:\n      return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL_TEXTURE_CUBE_MAP_POSITIVE_X ?\n    layer + GL_TEXTURE_CUBE_MAP_POSITIVE_X :\n    layer;\n}\n\n// Returns number of components in a specific WebGL format\nfunction glFormatToComponents(format) {\n  switch (format) {\n  case GL.ALPHA: return 1;\n  case GL.RGB: return 3;\n  case GL.RGBA: return 4;\n  default: throw new Error('Unknown format');\n  }\n}\n\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n"]}