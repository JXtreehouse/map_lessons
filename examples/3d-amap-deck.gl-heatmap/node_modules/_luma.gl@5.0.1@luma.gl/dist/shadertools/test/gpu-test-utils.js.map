{"version":3,"sources":["../../../src/shadertools/test/gpu-test-utils.js"],"names":["initializeGL","initializeTexTarget","render","getGPUOutput","glEnumToString","gl","value","NO_ERROR","p","toString","glErrorShouldBe","glErrors","opt_msg","length","err","getError","ndx","indexOf","errStrs","ii","push","msg","console","error","canvas","viewport","width","height","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","texImage2D","RGBA32F","RGBA","FLOAT","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","drawArrays","TRIANGLE_STRIP","buf","Float32Array","readPixels"],"mappings":"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","file":"gpu-test-utils.js","sourcesContent":["/* eslint-disable max-len, prefer-template, camelcase */\n/* global console */\n/* eslint-disable no-console */\nimport {createGLContext, setParameters} from 'luma.gl';\n\n// Utilities functions that to be moved to a common place for future tests\n\nfunction glEnumToString(gl, value) {\n  // Optimization for the most common enum:\n  if (value === gl.NO_ERROR) {\n    return 'NO_ERROR';\n  }\n  for (const p in gl) {\n    if (gl[p] === value) {\n      return p;\n    }\n  }\n  return '0x' + value.toString(16);\n}\n\nfunction glErrorShouldBe(gl, glErrors, opt_msg) {\n  if (!glErrors.length) {\n    glErrors = [glErrors];\n  }\n  opt_msg = opt_msg || '';\n  const err = gl.getError();\n  const ndx = glErrors.indexOf(err);\n  const errStrs = [];\n  for (let ii = 0; ii < glErrors.length; ++ii) {\n    errStrs.push(glEnumToString(gl, glErrors[ii]));\n  }\n  // const expected = errStrs.join(' or ');\n  if (ndx < 0) {\n    const msg = `getError expected${(glErrors.length > 1) ? ' one of: ' : ': '}`;\n    console.error('FAIL ' + msg);\n  }\n}\n\nexport function initializeGL(canvas) {\n  const gl = createGLContext(canvas);\n  setParameters(gl, {\n    viewport: [0, 0, canvas.width, canvas.height],\n    clearColor: [0, 0, 0, 1],\n    clearDepth: 1\n  });\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  return gl;\n}\n\nexport function initializeTexTarget(gl) {\n  const framebuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  framebuffer.width = 10;\n  framebuffer.height = 10;\n\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, framebuffer.width, framebuffer.height, 0, gl.RGBA, gl.FLOAT, null);\n\n  const renderbuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, framebuffer.width, framebuffer.height);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n\n}\n\nexport function render(gl) {\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  glErrorShouldBe(gl, gl.NO_ERROR, 'no error from draw');\n}\n\nexport function getGPUOutput(gl) {\n  const width = gl.canvas.width;\n  const height = gl.canvas.height;\n  const buf = new Float32Array(width * height * 4);\n  gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, buf);\n  return buf;\n}\n"]}