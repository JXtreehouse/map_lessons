{"version":3,"sources":["../../../../src/shadertools/modules/fp64/fp64-test-utils.js"],"names":["getRelativeError64","getRelativeError","testcase","BUFFER_DATA","Float32Array","fp64ify","a","hi","Math","fround","lo","getFloat64","upper","random","pow","result","reference","reference64","result64","abs","getBinaryShader","operation","getUnaryShader","FS_RENDER_VCOLOR","setupFloatTest","gl","glslFunc","binary","limit","op","b","expected","a_fp64","b_fp64","expected_fp64","vs","program","fs","modules","use","setBuffers","positions","target","ARRAY_BUFFER","data","size","setUniforms","ONE","ITERATIONS","EPSILON","t","idx0","gpu_result","relativeError","args","toPrecision","message","ok","comment","toString","end","canvas","document","createElement","width","height","window","onload","body","appendChild"],"mappings":"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","file":"fp64-test-utils.js","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Special utility functions for df64 tests\n\n/* eslint-disable camelcase, prefer-template, max-len */\n/* global window, document, */\n\nimport {Buffer, Program, assembleShaders, registerShaderModules, fp64} from 'luma.gl';\nimport {initializeGL, initializeTexTarget, render, getGPUOutput} from '../../test/gpu-test-utils';\n\nconst BUFFER_DATA = new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]);\n\nfunction fp64ify(a) {\n  const hi = Math.fround(a);\n  const lo = a - Math.fround(a);\n  return new Float32Array([hi, lo]);\n}\n\nfunction getFloat64(upper = 256) {\n  return Math.random() * Math.pow(2.0, (Math.random() - 0.5) * upper);\n}\n\nexport function getRelativeError64(result, reference) {\n  const reference64 = reference[0] + reference[1];\n  const result64 = result[0] + result[1];\n  return Math.abs((reference64 - result64) / reference64);\n}\n\nexport function getRelativeError(result, reference) {\n  return Math.abs((reference - result) / reference);\n}\n\nfunction getBinaryShader(operation) {\n  return `\\\nattribute vec3 positions;\nuniform vec2 a;\nuniform vec2 b;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_Position = vec4(positions, 1.0);\n  vec2 result = ${operation}(a, b);\n  vColor = vec4(result.x, result.y, 0.0, 1.0);\n}\n`;\n}\n\nfunction getUnaryShader(operation) {\n  return `\\\nattribute vec3 positions;\nuniform vec2 a;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_Position = vec4(positions, 1.0);\n  vec2 result = ${operation}(a);\n  vColor = vec4(result.x, result.y, 0.0, 1.0);\n}\n`;\n}\n\nconst FS_RENDER_VCOLOR = `\\\n#ifdef GL_ES\nprecision highp float;\n#endif\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}\n`;\n\nfunction setupFloatTest(gl, {glslFunc, binary = false, limit = 256, op}) {\n  const a = getFloat64(limit);\n  const b = getFloat64(limit);\n  const expected = op(a, b);\n\n  const a_fp64 = fp64ify(a);\n  const b_fp64 = fp64ify(b);\n  const expected_fp64 = fp64ify(expected);\n\n  const vs = binary ? getBinaryShader(glslFunc) : getUnaryShader(glslFunc);\n\n  const program = new Program(gl, assembleShaders(gl, {\n    vs,\n    fs: FS_RENDER_VCOLOR,\n    modules: ['fp64']\n  }));\n\n  program\n    .use()\n    .setBuffers({\n      positions: new Buffer(gl, {target: gl.ARRAY_BUFFER, data: BUFFER_DATA, size: 2})\n    })\n    .setUniforms({\n      a: a_fp64,\n      b: b_fp64,\n      ONE: 1.0\n    });\n\n  return {a, b, expected, a_fp64, b_fp64, expected_fp64, program};\n}\n\nconst ITERATIONS = 10;\nconst EPSILON = 1e-14;\n\nexport function testcase(gl, {glslFunc, binary, op, limit = 256, t}) {\n  for (let idx0 = 0; idx0 < ITERATIONS; idx0++) {\n    const {a, b, a_fp64, b_fp64, expected_fp64} = setupFloatTest(gl, {\n      glslFunc, binary, op, limit\n    });\n    render(gl);\n    const gpu_result = getGPUOutput(gl);\n    const relativeError = getRelativeError64(gpu_result, expected_fp64);\n    const args = binary ? `(${a.toPrecision(2)}, ${b.toPrecision(2)})` : `(${a.toPrecision(2)})`;\n    const message = `${glslFunc}${args}: error=${relativeError}, within ${EPSILON}`;\n    t.ok(relativeError < EPSILON, message);\n    if (relativeError >= EPSILON) {\n      t.comment(` (tested ${a_fp64.toString()}, ${b_fp64.toString()})`);\n    }\n  }\n  t.end();\n}\n\n// Main entrance\nconst canvas = document.createElement('canvas');\ncanvas.width = 16;\ncanvas.height = 16;\n\nexport const gl = initializeGL(canvas);\ninitializeTexTarget(gl);\nregisterShaderModules([fp64]);\n\nwindow.onload = () => {\n  document.body.appendChild(canvas);\n};\n"]}