'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _viewportMercatorProject = require('viewport-mercator-project');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  /** Event handling */
  captureScroll: _propTypes2.default.bool,
  // Stop map pan & rotate
  captureDrag: _propTypes2.default.bool,
  // Stop map click
  captureClick: _propTypes2.default.bool,
  // Stop map double click
  captureDoubleClick: _propTypes2.default.bool
}; // Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


var defaultProps = {
  captureScroll: false,
  captureDrag: true,
  captureClick: true,
  captureDoubleClick: true
};

var contextTypes = {
  viewport: _propTypes2.default.instanceOf(_viewportMercatorProject.PerspectiveMercatorViewport),
  isDragging: _propTypes2.default.bool,
  eventManager: _propTypes2.default.object
};

var EVENT_MAP = {
  captureScroll: 'wheel',
  captureDrag: 'panstart',
  captureClick: 'click',
  captureDoubleClick: 'dblclick'
};

/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the marker's position when the parent re-renders.
 */

var BaseControl = function (_Component) {
  (0, _inherits3.default)(BaseControl, _Component);

  function BaseControl(props) {
    (0, _classCallCheck3.default)(this, BaseControl);

    var _this = (0, _possibleConstructorReturn3.default)(this, (BaseControl.__proto__ || (0, _getPrototypeOf2.default)(BaseControl)).call(this, props));

    _this._events = null;

    _this._onContainerLoad = _this._onContainerLoad.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(BaseControl, [{
    key: '_onContainerLoad',
    value: function _onContainerLoad(ref) {
      var eventManager = this.context.eventManager;

      var events = this._events;

      // Remove all previously registered events
      if (events) {
        eventManager.off(events);
        events = null;
      }

      if (ref) {
        // container is mounted: register events for this element
        events = {};

        for (var propName in EVENT_MAP) {
          var shouldCapture = this.props[propName];
          var eventName = EVENT_MAP[propName];

          if (shouldCapture) {
            events[eventName] = this._captureEvent;
          }
        }

        eventManager.on(events, ref);
      }

      this._events = events;
    }
  }, {
    key: '_captureEvent',
    value: function _captureEvent(evt) {
      evt.stopPropagation();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return BaseControl;
}(_react.Component);

exports.default = BaseControl;


BaseControl.propTypes = propTypes;
BaseControl.defaultProps = defaultProps;
BaseControl.contextTypes = contextTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2Jhc2UtY29udHJvbC5qcyJdLCJuYW1lcyI6WyJwcm9wVHlwZXMiLCJjYXB0dXJlU2Nyb2xsIiwiYm9vbCIsImNhcHR1cmVEcmFnIiwiY2FwdHVyZUNsaWNrIiwiY2FwdHVyZURvdWJsZUNsaWNrIiwiZGVmYXVsdFByb3BzIiwiY29udGV4dFR5cGVzIiwidmlld3BvcnQiLCJpbnN0YW5jZU9mIiwiaXNEcmFnZ2luZyIsImV2ZW50TWFuYWdlciIsIm9iamVjdCIsIkVWRU5UX01BUCIsIkJhc2VDb250cm9sIiwicHJvcHMiLCJfZXZlbnRzIiwiX29uQ29udGFpbmVyTG9hZCIsImJpbmQiLCJyZWYiLCJjb250ZXh0IiwiZXZlbnRzIiwib2ZmIiwicHJvcE5hbWUiLCJzaG91bGRDYXB0dXJlIiwiZXZlbnROYW1lIiwiX2NhcHR1cmVFdmVudCIsIm9uIiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7QUFDQTs7OztBQUNBOzs7O0FBRUEsSUFBTUEsWUFBWTtBQUNoQjtBQUNBQyxpQkFBZSxvQkFBVUMsSUFGVDtBQUdoQjtBQUNBQyxlQUFhLG9CQUFVRCxJQUpQO0FBS2hCO0FBQ0FFLGdCQUFjLG9CQUFVRixJQU5SO0FBT2hCO0FBQ0FHLHNCQUFvQixvQkFBVUg7QUFSZCxDQUFsQixDLENBdkJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFnQkEsSUFBTUksZUFBZTtBQUNuQkwsaUJBQWUsS0FESTtBQUVuQkUsZUFBYSxJQUZNO0FBR25CQyxnQkFBYyxJQUhLO0FBSW5CQyxzQkFBb0I7QUFKRCxDQUFyQjs7QUFPQSxJQUFNRSxlQUFlO0FBQ25CQyxZQUFVLG9CQUFVQyxVQUFWLHNEQURTO0FBRW5CQyxjQUFZLG9CQUFVUixJQUZIO0FBR25CUyxnQkFBYyxvQkFBVUM7QUFITCxDQUFyQjs7QUFNQSxJQUFNQyxZQUFZO0FBQ2hCWixpQkFBZSxPQURDO0FBRWhCRSxlQUFhLFVBRkc7QUFHaEJDLGdCQUFjLE9BSEU7QUFJaEJDLHNCQUFvQjtBQUpKLENBQWxCOztBQU9BOzs7Ozs7OztJQU9xQlMsVzs7O0FBRW5CLHVCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsZ0pBQ1hBLEtBRFc7O0FBR2pCLFVBQUtDLE9BQUwsR0FBZSxJQUFmOztBQUVBLFVBQUtDLGdCQUFMLEdBQXdCLE1BQUtBLGdCQUFMLENBQXNCQyxJQUF0QixPQUF4QjtBQUxpQjtBQU1sQjs7OztxQ0FFZ0JDLEcsRUFBSztBQUFBLFVBQ2JSLFlBRGEsR0FDRyxLQUFLUyxPQURSLENBQ2JULFlBRGE7O0FBRXBCLFVBQUlVLFNBQVMsS0FBS0wsT0FBbEI7O0FBRUE7QUFDQSxVQUFJSyxNQUFKLEVBQVk7QUFDVlYscUJBQWFXLEdBQWIsQ0FBaUJELE1BQWpCO0FBQ0FBLGlCQUFTLElBQVQ7QUFDRDs7QUFFRCxVQUFJRixHQUFKLEVBQVM7QUFDUDtBQUNBRSxpQkFBUyxFQUFUOztBQUVBLGFBQUssSUFBTUUsUUFBWCxJQUF1QlYsU0FBdkIsRUFBa0M7QUFDaEMsY0FBTVcsZ0JBQWdCLEtBQUtULEtBQUwsQ0FBV1EsUUFBWCxDQUF0QjtBQUNBLGNBQU1FLFlBQVlaLFVBQVVVLFFBQVYsQ0FBbEI7O0FBRUEsY0FBSUMsYUFBSixFQUFtQjtBQUNqQkgsbUJBQU9JLFNBQVAsSUFBb0IsS0FBS0MsYUFBekI7QUFDRDtBQUNGOztBQUVEZixxQkFBYWdCLEVBQWIsQ0FBZ0JOLE1BQWhCLEVBQXdCRixHQUF4QjtBQUNEOztBQUVELFdBQUtILE9BQUwsR0FBZUssTUFBZjtBQUNEOzs7a0NBRWFPLEcsRUFBSztBQUNqQkEsVUFBSUMsZUFBSjtBQUNEOzs7NkJBRVE7QUFDUCxhQUFPLElBQVA7QUFDRDs7Ozs7a0JBN0NrQmYsVzs7O0FBaURyQkEsWUFBWWQsU0FBWixHQUF3QkEsU0FBeEI7QUFDQWMsWUFBWVIsWUFBWixHQUEyQkEsWUFBM0I7QUFDQVEsWUFBWVAsWUFBWixHQUEyQkEsWUFBM0IiLCJmaWxlIjoiYmFzZS1jb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG5cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtQZXJzcGVjdGl2ZU1lcmNhdG9yVmlld3BvcnR9IGZyb20gJ3ZpZXdwb3J0LW1lcmNhdG9yLXByb2plY3QnO1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIC8qKiBFdmVudCBoYW5kbGluZyAqL1xuICBjYXB0dXJlU2Nyb2xsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gU3RvcCBtYXAgcGFuICYgcm90YXRlXG4gIGNhcHR1cmVEcmFnOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gU3RvcCBtYXAgY2xpY2tcbiAgY2FwdHVyZUNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gU3RvcCBtYXAgZG91YmxlIGNsaWNrXG4gIGNhcHR1cmVEb3VibGVDbGljazogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgY2FwdHVyZVNjcm9sbDogZmFsc2UsXG4gIGNhcHR1cmVEcmFnOiB0cnVlLFxuICBjYXB0dXJlQ2xpY2s6IHRydWUsXG4gIGNhcHR1cmVEb3VibGVDbGljazogdHJ1ZVxufTtcblxuY29uc3QgY29udGV4dFR5cGVzID0ge1xuICB2aWV3cG9ydDogUHJvcFR5cGVzLmluc3RhbmNlT2YoUGVyc3BlY3RpdmVNZXJjYXRvclZpZXdwb3J0KSxcbiAgaXNEcmFnZ2luZzogUHJvcFR5cGVzLmJvb2wsXG4gIGV2ZW50TWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuY29uc3QgRVZFTlRfTUFQID0ge1xuICBjYXB0dXJlU2Nyb2xsOiAnd2hlZWwnLFxuICBjYXB0dXJlRHJhZzogJ3BhbnN0YXJ0JyxcbiAgY2FwdHVyZUNsaWNrOiAnY2xpY2snLFxuICBjYXB0dXJlRG91YmxlQ2xpY2s6ICdkYmxjbGljaydcbn07XG5cbi8qXG4gKiBQdXJlQ29tcG9uZW50IGRvZXNuJ3QgdXBkYXRlIHdoZW4gY29udGV4dCBjaGFuZ2VzLlxuICogVGhlIG9ubHkgd2F5IGlzIHRvIGltcGxlbWVudCBvdXIgb3duIHNob3VsZENvbXBvbmVudFVwZGF0ZSBoZXJlLiBDb25zaWRlcmluZ1xuICogdGhlIHBhcmVudCBjb21wb25lbnQgKFN0YXRpY01hcCBvciBJbnRlcmFjdGl2ZU1hcCkgaXMgcHVyZSwgYW5kIG1hcCByZS1yZW5kZXJcbiAqIGlzIGFsbW9zdCBhbHdheXMgdHJpZ2dlcmVkIGJ5IGEgdmlld3BvcnQgY2hhbmdlLCB3ZSBhbG1vc3QgZGVmaW5pdGVseSBuZWVkIHRvXG4gKiByZWNhbGN1bGF0ZSB0aGUgbWFya2VyJ3MgcG9zaXRpb24gd2hlbiB0aGUgcGFyZW50IHJlLXJlbmRlcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuX2V2ZW50cyA9IG51bGw7XG5cbiAgICB0aGlzLl9vbkNvbnRhaW5lckxvYWQgPSB0aGlzLl9vbkNvbnRhaW5lckxvYWQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIF9vbkNvbnRhaW5lckxvYWQocmVmKSB7XG4gICAgY29uc3Qge2V2ZW50TWFuYWdlcn0gPSB0aGlzLmNvbnRleHQ7XG4gICAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICAgIC8vIFJlbW92ZSBhbGwgcHJldmlvdXNseSByZWdpc3RlcmVkIGV2ZW50c1xuICAgIGlmIChldmVudHMpIHtcbiAgICAgIGV2ZW50TWFuYWdlci5vZmYoZXZlbnRzKTtcbiAgICAgIGV2ZW50cyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHJlZikge1xuICAgICAgLy8gY29udGFpbmVyIGlzIG1vdW50ZWQ6IHJlZ2lzdGVyIGV2ZW50cyBmb3IgdGhpcyBlbGVtZW50XG4gICAgICBldmVudHMgPSB7fTtcblxuICAgICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBFVkVOVF9NQVApIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkQ2FwdHVyZSA9IHRoaXMucHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICBjb25zdCBldmVudE5hbWUgPSBFVkVOVF9NQVBbcHJvcE5hbWVdO1xuXG4gICAgICAgIGlmIChzaG91bGRDYXB0dXJlKSB7XG4gICAgICAgICAgZXZlbnRzW2V2ZW50TmFtZV0gPSB0aGlzLl9jYXB0dXJlRXZlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnRNYW5hZ2VyLm9uKGV2ZW50cywgcmVmKTtcbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudHMgPSBldmVudHM7XG4gIH1cblxuICBfY2FwdHVyZUV2ZW50KGV2dCkge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbkJhc2VDb250cm9sLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkJhc2VDb250cm9sLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkJhc2VDb250cm9sLmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiJdfQ==